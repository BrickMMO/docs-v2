{"pageProps":{"userLanguage":"en","componentsApiDescriptions":{"Snackbar":{"en":{"componentDescription":"","propDescriptions":{"autoHideDuration":{"description":"The number of milliseconds to wait before automatically calling the <code>onClose</code> function. <code>onClose</code> should then set the state of the <code>open</code> prop to hide the Snackbar. This behavior is disabled by default with the <code>null</code> value."},"disableWindowBlurListener":{"description":"If <code>true</code>, the <code>autoHideDuration</code> timer will expire even if the window is not focused."},"exited":{"description":"The prop used to handle exited transition and unmount the component."},"onClose":{"description":"Callback fired when the component requests to be closed. Typically <code>onClose</code> is used to set state in the parent component, which is used to control the <code>Snackbar</code> <code>open</code> prop. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>, for example ignoring <code>clickaway</code>.","typeDescriptions":{"event":"The event source of the callback.","reason":"Can be: <code>&quot;timeout&quot;</code> (<code>autoHideDuration</code> expired), <code>&quot;clickaway&quot;</code>, or <code>&quot;escapeKeyDown&quot;</code>."}},"open":{"description":"If <code>true</code>, the component is shown."},"resumeHideDuration":{"description":"The number of milliseconds to wait before dismissing after user interaction. If <code>autoHideDuration</code> prop isn&#39;t specified, it does nothing. If <code>autoHideDuration</code> prop is specified but <code>resumeHideDuration</code> isn&#39;t, we default to <code>autoHideDuration / 2</code> ms."},"slotProps":{"description":"The props used for each slot inside the Snackbar."},"slots":{"description":"The components used for each slot inside the Snackbar. Either a string to use a HTML element or a component."}},"classDescriptions":{"root":{"description":"Class name applied to the root element."}},"slotDescriptions":{"root":"The component that renders the root."}}}},"componentsApiPageContents":{"Snackbar":{"props":{"autoHideDuration":{"type":{"name":"number"},"default":"null"},"disableWindowBlurListener":{"type":{"name":"bool"},"default":"false"},"exited":{"type":{"name":"bool"},"default":"true"},"onClose":{"type":{"name":"func"},"signature":{"type":"function(event: React.SyntheticEvent<any> | Event, reason: string) => void","describedArgs":["event","reason"]}},"open":{"type":{"name":"bool"}},"resumeHideDuration":{"type":{"name":"number"}},"slotProps":{"type":{"name":"shape","description":"{ clickAwayListener?: func<br>&#124;&nbsp;{ children: element, disableReactTree?: bool, mouseEvent?: 'onClick'<br>&#124;&nbsp;'onMouseDown'<br>&#124;&nbsp;'onMouseUp'<br>&#124;&nbsp;'onPointerDown'<br>&#124;&nbsp;'onPointerUp'<br>&#124;&nbsp;false, onClickAway?: func, touchEvent?: 'onTouchEnd'<br>&#124;&nbsp;'onTouchStart'<br>&#124;&nbsp;false }, root?: func<br>&#124;&nbsp;object }"},"default":"{}"},"slots":{"type":{"name":"shape","description":"{ root?: elementType }"},"default":"{}","additionalInfo":{"slotsApi":true}}},"name":"Snackbar","imports":["import { Snackbar } from '@mui/base/Snackbar';","import { Snackbar } from '@mui/base';"],"styles":{"classes":["root"],"globalClasses":{},"name":null},"slots":[{"name":"root","description":"The component that renders the root.","default":"'div'","class":".MuiSnackbar-root"}],"spread":true,"muiName":"MuiSnackbar","forwardsRefTo":"HTMLDivElement","filename":"/packages/mui-base/src/Snackbar/Snackbar.tsx","inheritance":null,"demos":"<ul><li><a href=\"/base-ui/react-snackbar/\">Snackbar</a></li>\n<li><a href=\"/joy-ui/react-snackbar/\">Snackbar</a></li>\n<li><a href=\"/material-ui/react-snackbar/\">Snackbar</a></li></ul>","cssComponent":false}},"hooksApiDescriptions":{"useSnackbar":{"en":{"hookDescription":"The basic building block for creating custom snackbar.","parametersDescriptions":{"autoHideDuration":{"description":"The number of milliseconds to wait before automatically calling the <code>onClose</code> function. <code>onClose</code> should then set the state of the <code>open</code> prop to hide the Snackbar. This behavior is disabled by default with the <code>null</code> value."},"disableWindowBlurListener":{"description":"If <code>true</code>, the <code>autoHideDuration</code> timer will expire even if the window is not focused."},"onClose":{"description":"Callback fired when the component requests to be closed. Typically <code>onClose</code> is used to set state in the parent component, which is used to control the <code>Snackbar</code> <code>open</code> prop. The <code>reason</code> parameter can optionally be used to control the response to <code>onClose</code>, for example ignoring <code>clickaway</code>."},"open":{"description":"If <code>true</code>, the component is shown."},"resumeHideDuration":{"description":"The number of milliseconds to wait before dismissing after user interaction. If <code>autoHideDuration</code> prop isn&#39;t specified, it does nothing. If <code>autoHideDuration</code> prop is specified but <code>resumeHideDuration</code> isn&#39;t, we default to <code>autoHideDuration / 2</code> ms."}},"returnValueDescriptions":{"getRootProps":{"description":"Resolver for the root slot&#39;s props."},"onClickAway":{"description":"Callback fired when a &quot;click away&quot; event is detected."}}}}},"hooksApiPageContents":{"useSnackbar":{"parameters":{"autoHideDuration":{"type":{"name":"number | null","description":"number | null"},"default":"null"},"disableWindowBlurListener":{"type":{"name":"boolean","description":"boolean"},"default":"false"},"onClose":{"type":{"name":"(event: React.SyntheticEvent&lt;any&gt; | Event | null, reason: SnackbarCloseReason) =&gt; void","description":"(event: React.SyntheticEvent&lt;any&gt; | Event | null, reason: SnackbarCloseReason) =&gt; void"}},"open":{"type":{"name":"boolean","description":"boolean"}},"resumeHideDuration":{"type":{"name":"number","description":"number"}}},"returnValue":{"getRootProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSnackbarRootSlotProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSnackbarRootSlotProps&lt;ExternalProps&gt;"},"required":true},"onClickAway":{"type":{"name":"(event: React.SyntheticEvent&lt;any&gt; | Event) =&gt; void","description":"(event: React.SyntheticEvent&lt;any&gt; | Event) =&gt; void"},"required":true}},"name":"useSnackbar","filename":"/packages/mui-base/src/useSnackbar/useSnackbar.ts","imports":["import { useSnackbar } from '@mui/base/useSnackbar';","import { useSnackbar } from '@mui/base';"],"demos":"<ul><li><a href=\"/base-ui/react-snackbar/#hook\">Snackbar</a></li></ul>"}}},"__N_SSG":true}