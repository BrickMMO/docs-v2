{"pageProps":{"userLanguage":"en","componentsApiDescriptions":{"Option":{"en":{"componentDescription":"<p>An unstyled option to be used within a Select.</p>\n","propDescriptions":{"disabled":{"description":"If <code>true</code>, the option will be disabled."},"label":{"description":"A text representation of the option&#39;s content. Used for keyboard text navigation matching."},"slotProps":{"description":"The props used for each slot inside the Option."},"slots":{"description":"The components used for each slot inside the Option. Either a string to use a HTML element or a component."},"value":{"description":"The value of the option."}},"classDescriptions":{"root":{"description":"Class name applied to the root element."},"disabled":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>li</code> element","conditions":"<code>disabled={true}</code>"},"selected":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>li</code> element","conditions":"<code>selected={true}</code>"},"highlighted":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>li</code> element","conditions":"<code>highlighted={true}</code>"}},"slotDescriptions":{"root":"The component that renders the root."},"componentDescriptionToc":[]}},"OptionGroup":{"en":{"componentDescription":"<p>An unstyled option group to be used within a Select.</p>\n","propDescriptions":{"disabled":{"description":"If <code>true</code> all the options in the group will be disabled."},"label":{"description":"The human-readable description of the group."},"slotProps":{"description":"The props used for each slot inside the Input."},"slots":{"description":"The components used for each slot inside the OptionGroup. Either a string to use a HTML element or a component."}},"classDescriptions":{"root":{"description":"Class name applied to the root element."},"disabled":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>li</code> element","conditions":"<code>disabled={true}</code>"},"label":{"description":"Class name applied to {{nodeName}}.","nodeName":"the label element"},"list":{"description":"Class name applied to {{nodeName}}.","nodeName":"the list element"}},"slotDescriptions":{"root":"The component that renders the root.","label":"The component that renders the label.","list":"The component that renders the list."},"componentDescriptionToc":[]}},"Select":{"en":{"componentDescription":"<p>The foundation for building custom-styled select components.</p>\n","propDescriptions":{"areOptionsEqual":{"description":"A function used to determine if two options&#39; values are equal. By default, reference equality is used.<br>There is a performance impact when using the <code>areOptionsEqual</code> prop (proportional to the number of options). Therefore, it&#39;s recommented to use the default reference equality comparison whenever possible."},"autoComplete":{"description":"This prop helps users to fill forms faster, especially on mobile devices. The name can be confusing, as it&#39;s more like an autofill. You can learn more about it <a href=\"https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\">following the specification</a>."},"autoFocus":{"description":"If <code>true</code>, the select element is focused during the first mount"},"defaultListboxOpen":{"description":"If <code>true</code>, the select will be initially open."},"defaultValue":{"description":"The default selected value. Use when the component is not controlled."},"disabled":{"description":"If <code>true</code>, the select is disabled."},"getOptionAsString":{"description":"A function used to convert the option label to a string. It&#39;s useful when labels are elements and need to be converted to plain text to enable navigation using character keys on a keyboard."},"getSerializedValue":{"description":"A function to convert the currently selected value to a string. Used to set a value of a hidden input associated with the select, so that the selected value can be posted with a form."},"listboxId":{"description":"<code>id</code> attribute of the listbox element."},"listboxOpen":{"description":"Controls the open state of the select&#39;s listbox."},"multiple":{"description":"If <code>true</code>, selecting multiple values is allowed. This affects the type of the <code>value</code>, <code>defaultValue</code>, and <code>onChange</code> props."},"name":{"description":"Name of the element. For example used by the server to identify the fields in form submits. If the name is provided, the component will render a hidden input element that can be submitted to a server."},"onChange":{"description":"Callback fired when an option is selected."},"onListboxOpenChange":{"description":"Callback fired when the component requests to be opened. Use in controlled mode (see listboxOpen)."},"placeholder":{"description":"Text to show when there is no selected value."},"renderValue":{"description":"Function that customizes the rendering of the selected value."},"required":{"description":"If <code>true</code>, the Select cannot be empty when submitting form."},"slotProps":{"description":"The props used for each slot inside the Input."},"slots":{"description":"The components used for each slot inside the Select. Either a string to use a HTML element or a component."},"value":{"description":"The selected value. Set to <code>null</code> to deselect all options."}},"classDescriptions":{"root":{"description":"Class name applied to the root element."},"listbox":{"description":"Class name applied to {{nodeName}}.","nodeName":"the listbox element"},"popper":{"description":"Class name applied to {{nodeName}}.","nodeName":"the popper element"},"active":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>button</code> element","conditions":"<code>active={true}</code>"},"expanded":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>button</code> element","conditions":"<code>expanded={true}</code>"},"disabled":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>button</code> element and the listbox &#39;ul&#39; element","conditions":"<code>disabled={true}</code>"},"focusVisible":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root <code>button</code> element","conditions":"<code>focusVisible={true}</code>"}},"slotDescriptions":{"root":"The component that renders the root.","listbox":"The component that renders the listbox.","popper":"The component that renders the popper."},"componentDescriptionToc":[]}}},"componentsApiPageContents":{"Option":{"props":{"value":{"type":{"name":"any"},"required":true},"disabled":{"type":{"name":"bool"},"default":"false"},"label":{"type":{"name":"string"}},"slotProps":{"type":{"name":"shape","description":"{ root?: func<br>&#124;&nbsp;object }"},"default":"{}"},"slots":{"type":{"name":"shape","description":"{ root?: elementType }"},"default":"{}","additionalInfo":{"slotsApi":true}}},"name":"Option","imports":["import { Option } from '@mui/base/Option';","import { Option } from '@mui/base';"],"styles":{"classes":[],"globalClasses":{},"name":null},"slots":[{"name":"root","description":"The component that renders the root.","default":"'li'","class":".MuiOption-root"}],"classes":{"classes":["disabled","highlighted","selected"],"globalClasses":{"disabled":"Mui-disabled","selected":"Mui-selected"}},"spread":true,"muiName":"MuiOption","forwardsRefTo":"HTMLLIElement","filename":"/packages/mui-base/src/Option/Option.tsx","inheritance":null,"demos":"<ul><li><a href=\"/base-ui/react-select/\">Select</a></li></ul>","cssComponent":false},"OptionGroup":{"props":{"disabled":{"type":{"name":"bool"},"default":"false"},"label":{"type":{"name":"node"}},"slotProps":{"type":{"name":"shape","description":"{ label?: func<br>&#124;&nbsp;object, list?: func<br>&#124;&nbsp;object, root?: func<br>&#124;&nbsp;object }"},"default":"{}"},"slots":{"type":{"name":"shape","description":"{ label?: elementType, list?: elementType, root?: elementType }"},"default":"{}","additionalInfo":{"slotsApi":true}}},"name":"OptionGroup","imports":["import { OptionGroup } from '@mui/base/OptionGroup';","import { OptionGroup } from '@mui/base';"],"styles":{"classes":[],"globalClasses":{},"name":null},"slots":[{"name":"root","description":"The component that renders the root.","default":"'li'","class":".MuiOptionGroup-root"},{"name":"label","description":"The component that renders the label.","default":"'span'","class":".MuiOptionGroup-label"},{"name":"list","description":"The component that renders the list.","default":"'ul'","class":".MuiOptionGroup-list"}],"classes":{"classes":["disabled"],"globalClasses":{"disabled":"Mui-disabled"}},"spread":true,"muiName":"MuiOptionGroup","forwardsRefTo":"HTMLLIElement","filename":"/packages/mui-base/src/OptionGroup/OptionGroup.tsx","inheritance":null,"demos":"<ul><li><a href=\"/base-ui/react-select/\">Select</a></li></ul>","cssComponent":false},"Select":{"props":{"areOptionsEqual":{"type":{"name":"func"}},"autoComplete":{"type":{"name":"string"}},"autoFocus":{"type":{"name":"bool"},"default":"false"},"defaultListboxOpen":{"type":{"name":"bool"},"default":"false"},"defaultValue":{"type":{"name":"any"}},"disabled":{"type":{"name":"bool"},"default":"false"},"getOptionAsString":{"type":{"name":"func"},"default":"defaultOptionStringifier"},"getSerializedValue":{"type":{"name":"func"}},"listboxId":{"type":{"name":"string"}},"listboxOpen":{"type":{"name":"bool"},"default":"undefined"},"multiple":{"type":{"name":"bool"},"default":"false"},"name":{"type":{"name":"string"}},"onChange":{"type":{"name":"func"}},"onListboxOpenChange":{"type":{"name":"func"}},"placeholder":{"type":{"name":"node"}},"renderValue":{"type":{"name":"func"}},"required":{"type":{"name":"bool"},"default":"false"},"slotProps":{"type":{"name":"shape","description":"{ listbox?: func<br>&#124;&nbsp;object, popper?: func<br>&#124;&nbsp;object, root?: func<br>&#124;&nbsp;object }"},"default":"{}"},"slots":{"type":{"name":"shape","description":"{ listbox?: elementType, popper?: elementType, root?: elementType }"},"default":"{}","additionalInfo":{"slotsApi":true}},"value":{"type":{"name":"any"}}},"name":"Select","imports":["import { Select } from '@mui/base/Select';","import { Select } from '@mui/base';"],"styles":{"classes":[],"globalClasses":{},"name":null},"slots":[{"name":"root","description":"The component that renders the root.","default":"'button'","class":".MuiSelect-root"},{"name":"listbox","description":"The component that renders the listbox.","default":"'ul'","class":".MuiSelect-listbox"},{"name":"popper","description":"The component that renders the popper.","default":"Popper","class":".MuiSelect-popper"}],"classes":{"classes":["active","disabled","expanded","focusVisible"],"globalClasses":{"active":"Mui-active","expanded":"Mui-expanded","disabled":"Mui-disabled","focusVisible":"Mui-focusVisible"}},"spread":true,"muiName":"MuiSelect","forwardsRefTo":"HTMLButtonElement","filename":"/packages/mui-base/src/Select/Select.tsx","inheritance":null,"demos":"<ul><li><a href=\"/base-ui/react-select/\">Select</a></li></ul>","cssComponent":false}},"hooksApiDescriptions":{"useOption":{"en":{"hookDescription":"","parametersDescriptions":{},"returnValueDescriptions":{"getRootProps":{"description":"Resolver for the root slot&#39;s props."},"highlighted":{"description":"If <code>true</code>, the option is highlighted."},"rootRef":{"description":"Ref to the root slot DOM node."},"selected":{"description":"If <code>true</code>, the option is selected."}}}},"useSelect":{"en":{"hookDescription":"","parametersDescriptions":{"areOptionsEqual":{"description":"A function used to determine if two options&#39; values are equal. By default, reference equality is used.<br>There is a performance impact when using the <code>areOptionsEqual</code> prop (proportional to the number of options). Therefore, it&#39;s recommented to use the default reference equality comparison whenever possible."},"buttonRef":{"description":"The ref of the trigger button element."},"defaultOpen":{"description":"If <code>true</code>, the select will be open by default."},"defaultValue":{"description":"The default selected value. Use when the component is not controlled."},"disabled":{"description":"If <code>true</code>, the select is disabled."},"getOptionAsString":{"description":"A function used to convert the option label to a string. This is useful when labels are elements and need to be converted to plain text to enable keyboard navigation with character keys."},"getSerializedValue":{"description":"A function to convert the currently selected value to a string. Used to set a value of a hidden input associated with the select, so that the selected value can be posted with a form."},"listboxId":{"description":"The <code>id</code> attribute of the listbox element."},"listboxRef":{"description":"The ref of the listbox element."},"multiple":{"description":"If <code>true</code>, the end user can select multiple values. This affects the type of the <code>value</code>, <code>defaultValue</code>, and <code>onChange</code> props."},"name":{"description":"The <code>name</code> attribute of the hidden input element. This is useful when the select is embedded in a form and you want to access the selected value in the form data."},"onChange":{"description":"Callback fired when an option is selected."},"onHighlightChange":{"description":"Callback fired when an option is highlighted."},"onOpenChange":{"description":"Callback fired when the listbox is opened or closed."},"open":{"description":"Controls the open state of the select&#39;s listbox. This is the controlled equivalent of the <code>defaultOpen</code> prop."},"options":{"description":"An alternative way to specify the options. If this parameter is set, options defined as JSX children are ignored."},"required":{"description":"If <code>true</code>, the select embedded in a form must have a selected value. Otherwise, the form submission will fail."},"value":{"description":"The selected value. Set to <code>null</code> to deselect all options."}},"returnValueDescriptions":{"buttonActive":{"description":"If <code>true</code>, the trigger button is active (pressed)."},"buttonFocusVisible":{"description":"If <code>true</code>, the trigger button has a visible focus."},"buttonRef":{"description":"Ref to the button slot DOM node."},"contextValue":{"description":"A value to be passed to the <code>SelectProvider</code> component."},"disabled":{"description":"If <code>true</code>, the select is disabled."},"dispatch":{"description":"Action dispatcher for the select component. Allows to programmatically control the select."},"getButtonProps":{"description":"Resolver for the button slot&#39;s props."},"getHiddenInputProps":{"description":"Resolver for the hidden input slot&#39;s props."},"getListboxProps":{"description":"Resolver for the listbox slot&#39;s props."},"getOptionMetadata":{"description":"A function that returns the metadata of an option with a given value."},"highlightedOption":{"description":"The value of the highlighted option."},"listboxRef":{"description":"Ref to the listbox slot DOM node."},"open":{"description":"If <code>true</code>, the listbox is open."},"options":{"description":"Values of all the registered options."},"value":{"description":"The value of the selected option(s)."}}}}},"hooksApiPageContents":{"useOption":{"parameters":{"disabled":{"type":{"name":"boolean","description":"boolean"},"required":true},"label":{"type":{"name":"string | React.ReactNode","description":"string | React.ReactNode"},"required":true},"value":{"type":{"name":"Value","description":"Value"},"required":true},"id":{"type":{"name":"string","description":"string"}},"rootRef":{"type":{"name":"React.Ref&lt;Element&gt;","description":"React.Ref&lt;Element&gt;"}}},"returnValue":{"getRootProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt;&gt;(externalProps?: ExternalProps) =&gt; UseOptionRootSlotProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt;&gt;(externalProps?: ExternalProps) =&gt; UseOptionRootSlotProps&lt;ExternalProps&gt;"},"required":true},"highlighted":{"type":{"name":"boolean","description":"boolean"},"required":true},"index":{"type":{"name":"number","description":"number"},"required":true},"rootRef":{"type":{"name":"React.RefCallback&lt;Element&gt; | null","description":"React.RefCallback&lt;Element&gt; | null"},"required":true},"selected":{"type":{"name":"boolean","description":"boolean"},"required":true}},"name":"useOption","filename":"/packages/mui-base/src/useOption/useOption.ts","imports":["import { useOption } from '@mui/base/useOption';","import { useOption } from '@mui/base';"],"demos":"<ul><li><a href=\"/base-ui/react-select/#hooks\">Select</a></li></ul>"},"useSelect":{"parameters":{"areOptionsEqual":{"type":{"name":"(a: OptionValue, b: OptionValue) =&gt; boolean","description":"(a: OptionValue, b: OptionValue) =&gt; boolean"}},"buttonRef":{"type":{"name":"React.Ref&lt;Element&gt;","description":"React.Ref&lt;Element&gt;"}},"defaultOpen":{"type":{"name":"boolean","description":"boolean"},"default":"false"},"defaultValue":{"type":{"name":"SelectValue&lt;OptionValue, Multiple&gt;","description":"SelectValue&lt;OptionValue, Multiple&gt;"}},"disabled":{"type":{"name":"boolean","description":"boolean"},"default":"false"},"getOptionAsString":{"type":{"name":"(option: SelectOption&lt;OptionValue&gt;) =&gt; string","description":"(option: SelectOption&lt;OptionValue&gt;) =&gt; string"},"default":"defaultOptionStringifier"},"getSerializedValue":{"type":{"name":"(option: SelectValue&lt;SelectOption&lt;OptionValue&gt;, Multiple&gt;) =&gt; React.InputHTMLAttributes&lt;HTMLInputElement&gt;[&#39;value&#39;]","description":"(option: SelectValue&lt;SelectOption&lt;OptionValue&gt;, Multiple&gt;) =&gt; React.InputHTMLAttributes&lt;HTMLInputElement&gt;[&#39;value&#39;]"}},"listboxId":{"type":{"name":"string","description":"string"}},"listboxRef":{"type":{"name":"React.Ref&lt;Element&gt;","description":"React.Ref&lt;Element&gt;"}},"multiple":{"type":{"name":"Multiple","description":"Multiple"},"default":"false"},"name":{"type":{"name":"string","description":"string"}},"onChange":{"type":{"name":"(event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, value: SelectValue&lt;OptionValue, Multiple&gt;) =&gt; void","description":"(event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent | null, value: SelectValue&lt;OptionValue, Multiple&gt;) =&gt; void"}},"onHighlightChange":{"type":{"name":"(event: React.MouseEvent&lt;Element, MouseEvent&gt; | React.KeyboardEvent&lt;Element&gt; | React.FocusEvent&lt;Element, Element&gt; | null, highlighted: OptionValue | null) =&gt; void","description":"(event: React.MouseEvent&lt;Element, MouseEvent&gt; | React.KeyboardEvent&lt;Element&gt; | React.FocusEvent&lt;Element, Element&gt; | null, highlighted: OptionValue | null) =&gt; void"}},"onOpenChange":{"type":{"name":"(open: boolean) =&gt; void","description":"(open: boolean) =&gt; void"}},"open":{"type":{"name":"boolean","description":"boolean"}},"options":{"type":{"name":"SelectOptionDefinition&lt;OptionValue&gt;[]","description":"SelectOptionDefinition&lt;OptionValue&gt;[]"}},"required":{"type":{"name":"boolean","description":"boolean"}},"value":{"type":{"name":"SelectValue&lt;OptionValue, Multiple&gt;","description":"SelectValue&lt;OptionValue, Multiple&gt;"}}},"returnValue":{"buttonActive":{"type":{"name":"boolean","description":"boolean"},"required":true},"buttonFocusVisible":{"type":{"name":"boolean","description":"boolean"},"required":true},"buttonRef":{"type":{"name":"React.RefCallback&lt;Element&gt; | null","description":"React.RefCallback&lt;Element&gt; | null"},"required":true},"contextValue":{"type":{"name":"SelectProviderValue&lt;Value&gt;","description":"SelectProviderValue&lt;Value&gt;"},"required":true},"disabled":{"type":{"name":"boolean","description":"boolean"},"required":true},"dispatch":{"type":{"name":"(action: ListAction&lt;Value&gt; | SelectAction&lt;Value&gt;) =&gt; void","description":"(action: ListAction&lt;Value&gt; | SelectAction&lt;Value&gt;) =&gt; void"},"required":true},"getButtonProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSelectButtonSlotProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSelectButtonSlotProps&lt;ExternalProps&gt;"},"required":true},"getHiddenInputProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSelectHiddenInputSlotProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSelectHiddenInputSlotProps&lt;ExternalProps&gt;"},"required":true},"getListboxProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSelectListboxSlotProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSelectListboxSlotProps&lt;ExternalProps&gt;"},"required":true},"getOptionMetadata":{"type":{"name":"(optionValue: Value) =&gt; SelectOption&lt;Value&gt; | undefined","description":"(optionValue: Value) =&gt; SelectOption&lt;Value&gt; | undefined"},"required":true},"highlightedOption":{"type":{"name":"Value | null","description":"Value | null"},"required":true},"listboxRef":{"type":{"name":"React.RefCallback&lt;Element&gt; | null","description":"React.RefCallback&lt;Element&gt; | null"},"required":true},"open":{"type":{"name":"boolean","description":"boolean"},"required":true},"options":{"type":{"name":"Value[]","description":"Value[]"},"required":true},"value":{"type":{"name":"SelectValue&lt;Value, Multiple&gt;","description":"SelectValue&lt;Value, Multiple&gt;"},"required":true}},"name":"useSelect","filename":"/packages/mui-base/src/useSelect/useSelect.ts","imports":["import { useSelect } from '@mui/base/useSelect';","import { useSelect } from '@mui/base';"],"demos":"<ul><li><a href=\"/base-ui/react-select/#hooks\">Select</a></li></ul>"}}},"__N_SSG":true}