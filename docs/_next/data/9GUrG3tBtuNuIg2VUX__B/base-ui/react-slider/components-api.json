{"pageProps":{"userLanguage":"en","componentsApiDescriptions":{"Slider":{"en":{"componentDescription":"","propDescriptions":{"aria-label":{"description":"The label of the slider."},"aria-labelledby":{"description":"The id of the element containing a label for the slider."},"aria-valuetext":{"description":"A string value that provides a user-friendly name for the current value of the slider."},"defaultValue":{"description":"The default value. Use when the component is not controlled."},"disabled":{"description":"If <code>true</code>, the component is disabled."},"disableSwap":{"description":"If <code>true</code>, the active thumb doesn&#39;t swap when moving pointer over a thumb while dragging another thumb."},"getAriaLabel":{"description":"Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider. This is important for screen reader users.","typeDescriptions":{"index":"The thumb label&#39;s index to format."}},"getAriaValueText":{"description":"Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider. This is important for screen reader users.","typeDescriptions":{"value":"The thumb label&#39;s value to format.","index":"The thumb label&#39;s index to format."}},"isRtl":{"description":"If <code>true</code> the Slider will be rendered right-to-left (with the lowest value on the right-hand side)."},"marks":{"description":"Marks indicate predetermined values to which the user can move the slider. If <code>true</code> the marks are spaced according the value of the <code>step</code> prop. If an array, it should contain objects with <code>value</code> and an optional <code>label</code> keys."},"max":{"description":"The maximum allowed value of the slider. Should not be equal to min."},"min":{"description":"The minimum allowed value of the slider. Should not be equal to max."},"name":{"description":"Name attribute of the hidden <code>input</code> element."},"onChange":{"description":"Callback function that is fired when the slider&#39;s value changed.","typeDescriptions":{"event":"The event source of the callback. You can pull out the new value by accessing <code>event.target.value</code> (any). <strong>Warning</strong>: This is a generic event not a change event.","value":"The new value.","activeThumb":"Index of the currently moved thumb."}},"onChangeCommitted":{"description":"Callback function that is fired when the <code>mouseup</code> is triggered.","typeDescriptions":{"event":"The event source of the callback. <strong>Warning</strong>: This is a generic event not a change event.","value":"The new value."}},"orientation":{"description":"The component orientation."},"scale":{"description":"A transformation function, to change the scale of the slider."},"slotProps":{"description":"The props used for each slot inside the Slider."},"slots":{"description":"The components used for each slot inside the Slider. Either a string to use a HTML element or a component."},"step":{"description":"The granularity with which the slider can step through values. (A &quot;discrete&quot; slider.) The <code>min</code> prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step.<br>When step is <code>null</code>, the thumb can only be slid onto marks provided with the <code>marks</code> prop."},"tabIndex":{"description":"Tab index attribute of the hidden <code>input</code> element."},"track":{"description":"<p>The track presentation:</p>\n<ul>\n<li><code>normal</code> the track will render a bar representing the slider value.</li>\n<li><code>inverted</code> the track will render a bar representing the remaining slider value.</li>\n<li><code>false</code> the track will render without a bar.</li>\n</ul>\n"},"value":{"description":"The value of the slider. For ranged sliders, provide an array with two values."},"valueLabelFormat":{"description":"The format function the value label&#39;s value.<br>When a function is provided, it should have the following signature:<br>- {number} value The value label&#39;s value to format - {number} index The value label&#39;s index to format"}},"classDescriptions":{"root":{"description":"Class name applied to the root element."},"marked":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>marks</code> is provided with at least one label"},"vertical":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>orientation=\"vertical\"</code>"},"disabled":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root and thumb element","conditions":"<code>disabled={true}</code>"},"dragging":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root","conditions":"a thumb is being dragged"},"rail":{"description":"Class name applied to {{nodeName}}.","nodeName":"the rail element"},"track":{"description":"Class name applied to {{nodeName}}.","nodeName":"the track element"},"trackFalse":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>track={false}</code>"},"trackInverted":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>track=\"inverted\"</code>"},"thumb":{"description":"Class name applied to {{nodeName}}.","nodeName":"the thumb element"},"active":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the thumb element","conditions":"it&#39;s active"},"focusVisible":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the thumb element","conditions":"keyboard focused"},"mark":{"description":"Class name applied to {{nodeName}}.","nodeName":"the mark element"},"markActive":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the mark element","conditions":"active (depending on the value)"},"markLabel":{"description":"Class name applied to {{nodeName}}.","nodeName":"the mark label element"},"markLabelActive":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the mark label element","conditions":"active (depending on the value)"}},"slotDescriptions":{"root":"The component that renders the root.","track":"The component that renders the track.","rail":"The component that renders the rail.","thumb":"The component that renders the thumb.","mark":"The component that renders the mark.","markLabel":"The component that renders the mark label.","valueLabel":"The component that renders the value label.","input":"The component that renders the input."}}}},"componentsApiPageContents":{"Slider":{"props":{"aria-label":{"type":{"name":"custom","description":"string"}},"aria-labelledby":{"type":{"name":"string"}},"aria-valuetext":{"type":{"name":"custom","description":"string"}},"defaultValue":{"type":{"name":"union","description":"Array&lt;number&gt;<br>&#124;&nbsp;number"}},"disabled":{"type":{"name":"bool"},"default":"false"},"disableSwap":{"type":{"name":"bool"},"default":"false"},"getAriaLabel":{"type":{"name":"func"},"signature":{"type":"function(index: number) => string","describedArgs":["index"]}},"getAriaValueText":{"type":{"name":"func"},"signature":{"type":"function(value: number, index: number) => string","describedArgs":["value","index"]}},"isRtl":{"type":{"name":"bool"},"default":"false"},"marks":{"type":{"name":"union","description":"Array&lt;{ label?: node, value: number }&gt;<br>&#124;&nbsp;bool"},"default":"false"},"max":{"type":{"name":"number"},"default":"100"},"min":{"type":{"name":"number"},"default":"0"},"name":{"type":{"name":"string"}},"onChange":{"type":{"name":"func"},"signature":{"type":"function(event: Event, value: number | Array<number>, activeThumb: number) => void","describedArgs":["event","value","activeThumb"]}},"onChangeCommitted":{"type":{"name":"func"},"signature":{"type":"function(event: React.SyntheticEvent | Event, value: number | Array<number>) => void","describedArgs":["event","value"]}},"orientation":{"type":{"name":"enum","description":"'horizontal'<br>&#124;&nbsp;'vertical'"},"default":"'horizontal'"},"scale":{"type":{"name":"func"},"default":"function Identity(x) {\n  return x;\n}","signature":{"type":"function(x: any) => any","describedArgs":[]}},"slotProps":{"type":{"name":"shape","description":"{ input?: func<br>&#124;&nbsp;object, mark?: func<br>&#124;&nbsp;object, markLabel?: func<br>&#124;&nbsp;object, rail?: func<br>&#124;&nbsp;object, root?: func<br>&#124;&nbsp;object, thumb?: func<br>&#124;&nbsp;object, track?: func<br>&#124;&nbsp;object, valueLabel?: any<br>&#124;&nbsp;func }"},"default":"{}"},"slots":{"type":{"name":"shape","description":"{ input?: elementType, mark?: elementType, markLabel?: elementType, rail?: elementType, root?: elementType, thumb?: elementType, track?: elementType, valueLabel?: elementType }"},"default":"{}","additionalInfo":{"slotsApi":true}},"step":{"type":{"name":"number"},"default":"1"},"tabIndex":{"type":{"name":"number"}},"track":{"type":{"name":"enum","description":"'inverted'<br>&#124;&nbsp;'normal'<br>&#124;&nbsp;false"},"default":"'normal'"},"value":{"type":{"name":"union","description":"Array&lt;number&gt;<br>&#124;&nbsp;number"}},"valueLabelFormat":{"type":{"name":"union","description":"func<br>&#124;&nbsp;string"},"default":"function Identity(x) {\n  return x;\n}"}},"name":"Slider","imports":["import { Slider } from '@mui/base/Slider';","import { Slider } from '@mui/base';"],"styles":{"classes":[],"globalClasses":{},"name":null},"slots":[{"name":"root","description":"The component that renders the root.","default":"'span'","class":".MuiSlider-root"},{"name":"track","description":"The component that renders the track.","default":"'span'","class":".MuiSlider-track"},{"name":"rail","description":"The component that renders the rail.","default":"'span'","class":".MuiSlider-rail"},{"name":"thumb","description":"The component that renders the thumb.","default":"'span'","class":".MuiSlider-thumb"},{"name":"mark","description":"The component that renders the mark.","default":"'span'","class":".MuiSlider-mark"},{"name":"markLabel","description":"The component that renders the mark label.","default":"'span'","class":".MuiSlider-markLabel"},{"name":"valueLabel","description":"The component that renders the value label.","class":null},{"name":"input","description":"The component that renders the input.","default":"'input'","class":null}],"classes":{"classes":["active","disabled","dragging","focusVisible","markActive","marked","markLabelActive","trackFalse","trackInverted","vertical"],"globalClasses":{"disabled":"Mui-disabled","active":"Mui-active","focusVisible":"Mui-focusVisible"}},"spread":true,"muiName":"MuiSlider","forwardsRefTo":"HTMLSpanElement","filename":"/packages/mui-base/src/Slider/Slider.tsx","inheritance":null,"demos":"<ul><li><a href=\"/base-ui/react-slider/\">Slider</a></li></ul>","cssComponent":false}},"hooksApiDescriptions":{"useSlider":{"en":{"hookDescription":"","parametersDescriptions":{"aria-labelledby":{"description":"The id of the element containing a label for the slider."},"defaultValue":{"description":"The default value. Use when the component is not controlled."},"disabled":{"description":"If <code>true</code>, the component is disabled."},"disableSwap":{"description":"If <code>true</code>, the active thumb doesn&#39;t swap when moving pointer over a thumb while dragging another thumb."},"isRtl":{"description":"If <code>true</code> the Slider will be rendered right-to-left (with the lowest value on the right-hand side)."},"marks":{"description":"Marks indicate predetermined values to which the user can move the slider. If <code>true</code> the marks are spaced according the value of the <code>step</code> prop. If an array, it should contain objects with <code>value</code> and an optional <code>label</code> keys."},"max":{"description":"The maximum allowed value of the slider. Should not be equal to min."},"min":{"description":"The minimum allowed value of the slider. Should not be equal to max."},"name":{"description":"Name attribute of the hidden <code>input</code> element."},"onChange":{"description":"Callback function that is fired when the slider&#39;s value changed."},"onChangeCommitted":{"description":"Callback function that is fired when the <code>mouseup</code> is triggered."},"orientation":{"description":"The component orientation."},"rootRef":{"description":"The ref attached to the root of the Slider."},"scale":{"description":"A transformation function, to change the scale of the slider."},"step":{"description":"The granularity with which the slider can step through values. (A &quot;discrete&quot; slider.) The <code>min</code> prop serves as the origin for the valid values. We recommend (max - min) to be evenly divisible by the step.<br>When step is <code>null</code>, the thumb can only be slid onto marks provided with the <code>marks</code> prop."},"tabIndex":{"description":"Tab index attribute of the hidden <code>input</code> element."},"value":{"description":"The value of the slider. For ranged sliders, provide an array with two values."}},"returnValueDescriptions":{"active":{"description":"The active index of the slider."},"axis":{"description":"The orientation of the slider."},"axisProps":{"description":"Returns the <code>offset</code> and <code>leap</code> methods to calculate the positioning styles based on the slider axis."},"dragging":{"description":"If <code>true</code>, the slider is being dragged."},"focusedThumbIndex":{"description":"The index of the thumb which is focused on the slider."},"getHiddenInputProps":{"description":"Resolver for the hidden input slot&#39;s props."},"getRootProps":{"description":"Resolver for the root slot&#39;s props."},"getThumbProps":{"description":"Resolver for the thumb slot&#39;s props."},"getThumbStyle":{"description":"Resolver for the thumb slot&#39;s style prop."},"marks":{"description":"The marks of the slider. Marks indicate predetermined values to which the user can move the slider."},"open":{"description":"The thumb index for the current value when in hover state."},"range":{"description":"If <code>true</code>, the slider is a range slider when the <code>value</code> prop passed is an array."},"rootRef":{"description":"Ref to the root slot&#39;s DOM node."},"trackLeap":{"description":"The track leap for the current value of the slider."},"trackOffset":{"description":"The track offset for the current value of the slider."},"values":{"description":"The possible values of the slider."}}}}},"hooksApiPageContents":{"useSlider":{"parameters":{"aria-labelledby":{"type":{"name":"string","description":"string"}},"defaultValue":{"type":{"name":"number | number[]","description":"number | number[]"}},"disabled":{"type":{"name":"boolean","description":"boolean"},"default":"false"},"disableSwap":{"type":{"name":"boolean","description":"boolean"},"default":"false"},"isRtl":{"type":{"name":"boolean","description":"boolean"},"default":"false"},"marks":{"type":{"name":"boolean | Mark[]","description":"boolean | Mark[]"},"default":"false"},"max":{"type":{"name":"number","description":"number"},"default":"100"},"min":{"type":{"name":"number","description":"number"},"default":"0"},"name":{"type":{"name":"string","description":"string"}},"onChange":{"type":{"name":"(event: Event, value: number | number[], activeThumb: number) =&gt; void","description":"(event: Event, value: number | number[], activeThumb: number) =&gt; void"}},"onChangeCommitted":{"type":{"name":"(event: React.SyntheticEvent | Event, value: number | number[]) =&gt; void","description":"(event: React.SyntheticEvent | Event, value: number | number[]) =&gt; void"}},"orientation":{"type":{"name":"&#39;horizontal&#39; | &#39;vertical&#39;","description":"&#39;horizontal&#39; | &#39;vertical&#39;"},"default":"'horizontal'"},"rootRef":{"type":{"name":"React.Ref&lt;Element&gt;","description":"React.Ref&lt;Element&gt;"}},"scale":{"type":{"name":"(value: number) =&gt; number","description":"(value: number) =&gt; number"},"default":"function Identity(x) {\nreturn x;\n}"},"step":{"type":{"name":"number | null","description":"number | null"},"default":"1"},"tabIndex":{"type":{"name":"number","description":"number"}},"value":{"type":{"name":"number | number[]","description":"number | number[]"}}},"returnValue":{"active":{"type":{"name":"number","description":"number"},"required":true},"axis":{"type":{"name":"Axis","description":"Axis"},"required":true},"axisProps":{"type":{"name":"{ [key in Axis]: AxisProps&lt;key&gt; }","description":"{ [key in Axis]: AxisProps&lt;key&gt; }"},"required":true},"dragging":{"type":{"name":"boolean","description":"boolean"},"required":true},"focusedThumbIndex":{"type":{"name":"number","description":"number"},"required":true},"getHiddenInputProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSliderHiddenInputProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSliderHiddenInputProps&lt;ExternalProps&gt;"},"required":true},"getRootProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSliderRootSlotProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSliderRootSlotProps&lt;ExternalProps&gt;"},"required":true},"getThumbProps":{"type":{"name":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSliderThumbSlotProps&lt;ExternalProps&gt;","description":"&lt;ExternalProps extends Record&lt;string, unknown&gt; = {}&gt;(externalProps?: ExternalProps) =&gt; UseSliderThumbSlotProps&lt;ExternalProps&gt;"},"required":true},"getThumbStyle":{"type":{"name":"(index: number) =&gt; object","description":"(index: number) =&gt; object"},"required":true},"marks":{"type":{"name":"Mark[]","description":"Mark[]"},"required":true},"open":{"type":{"name":"number","description":"number"},"required":true},"range":{"type":{"name":"boolean","description":"boolean"},"required":true},"rootRef":{"type":{"name":"React.RefCallback&lt;Element&gt; | null","description":"React.RefCallback&lt;Element&gt; | null"},"required":true},"trackLeap":{"type":{"name":"number","description":"number"},"required":true},"trackOffset":{"type":{"name":"number","description":"number"},"required":true},"values":{"type":{"name":"number[]","description":"number[]"},"required":true}},"name":"useSlider","filename":"/packages/mui-base/src/useSlider/useSlider.ts","imports":["import { useSlider } from '@mui/base/useSlider';","import { useSlider } from '@mui/base';"],"demos":"<ul><li><a href=\"/base-ui/react-slider/#hook\">Slider</a></li></ul>"}}},"__N_SSG":true}