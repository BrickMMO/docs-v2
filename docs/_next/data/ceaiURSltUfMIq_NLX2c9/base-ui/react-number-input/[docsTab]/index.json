{"pageProps":{"userLanguage":"en","componentsApiDescriptions":{"NumberInput":{"en":{"componentDescription":"","propDescriptions":{"defaultValue":{"description":"The default value. Use when the component is not controlled."},"disabled":{"description":"If <code>true</code>, the component is disabled. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."},"endAdornment":{"description":"Trailing adornment for this input."},"error":{"description":"If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute on the input and the <code>Mui-error</code> class on the root element."},"id":{"description":"The id of the <code>input</code> element."},"max":{"description":"The maximum value."},"min":{"description":"The minimum value."},"onChange":{"description":"Callback fired after the value is clamped and changes - when the <code>input</code> is blurred or when the stepper buttons are triggered. Called with <code>undefined</code> when the value is unset.","typeDescriptions":{"event":"The event source of the callback","value":"The new value of the component"}},"onInputChange":{"description":"Callback fired when the <code>input</code> value changes after each keypress, before clamping is applied. Note that <code>event.target.value</code> may contain values that fall outside of <code>min</code> and <code>max</code> or are otherwise &quot;invalid&quot;.","typeDescriptions":{"event":"The event source of the callback."}},"readOnly":{"description":"If <code>true</code>, the <code>input</code> element becomes read-only. The stepper buttons remain active, with the addition that they are now keyboard focusable."},"required":{"description":"If <code>true</code>, the <code>input</code> element is required. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."},"shiftMultiplier":{"description":"Multiplier applied to <code>step</code> if the shift key is held while incrementing or decrementing the value. Defaults to <code>10</code>."},"slotProps":{"description":"The props used for each slot inside the NumberInput."},"slots":{"description":"The components used for each slot inside the InputBase. Either a string to use a HTML element or a component."},"startAdornment":{"description":"Leading adornment for this input."},"step":{"description":"The amount that the value changes on each increment or decrement."},"value":{"description":"The current value. Use when the component is controlled."}},"classDescriptions":{"root":{"description":"Class name applied to the root element."},"formControl":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"the component is a descendant of <code>FormControl</code>"},"adornedStart":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>startAdornment</code> is provided"},"adornedEnd":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>endAdornment</code> is provided"},"focused":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"the component is focused"},"disabled":{"description":"Class name applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>disabled={true}</code>"},"readOnly":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>readOnly={true}</code>"},"error":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>error={true}</code>"},"input":{"description":"Class name applied to {{nodeName}}.","nodeName":"the input element"},"incrementButton":{"description":"Class name applied to {{nodeName}}.","nodeName":"the increment button element"},"decrementButton":{"description":"Class name applied to {{nodeName}}.","nodeName":"the decrement button element"}},"slotDescriptions":{"root":"The component that renders the root.","input":"The component that renders the input.","incrementButton":"The component that renders the increment button.","decrementButton":"The component that renders the decrement button."}}}},"componentsApiPageContents":{"NumberInput":{"props":{"defaultValue":{"type":{"name":"any"}},"disabled":{"type":{"name":"bool"}},"endAdornment":{"type":{"name":"node"}},"error":{"type":{"name":"bool"}},"id":{"type":{"name":"string"}},"max":{"type":{"name":"number"}},"min":{"type":{"name":"number"}},"onChange":{"type":{"name":"func"},"signature":{"type":"function(event: React.FocusEvent<HTMLInputElement> | React.PointerEvent | React.KeyboardEvent, value: number | undefined) => void","describedArgs":["event","value"]}},"onInputChange":{"type":{"name":"func"},"signature":{"type":"function(event: React.ChangeEvent<HTMLInputElement>) => void","describedArgs":["event"]}},"readOnly":{"type":{"name":"bool"},"default":"false"},"required":{"type":{"name":"bool"}},"shiftMultiplier":{"type":{"name":"number"}},"slotProps":{"type":{"name":"shape","description":"{ decrementButton?: func<br>&#124;&nbsp;object, incrementButton?: func<br>&#124;&nbsp;object, input?: func<br>&#124;&nbsp;object, root?: func<br>&#124;&nbsp;object }"},"default":"{}"},"slots":{"type":{"name":"shape","description":"{ decrementButton?: elementType, incrementButton?: elementType, input?: elementType, root?: elementType }"},"default":"{}","additionalInfo":{"slotsApi":true}},"startAdornment":{"type":{"name":"node"}},"step":{"type":{"name":"number"}},"value":{"type":{"name":"any"}}},"name":"NumberInput","imports":["import { Unstable_NumberInput as NumberInput } from '@mui/base/Unstable_NumberInput';","import { Unstable_NumberInput as NumberInput } from '@mui/base';"],"styles":{"classes":[],"globalClasses":{},"name":null},"slots":[{"name":"root","description":"The component that renders the root.","default":"'div'","class":".MuiNumberInput-root"},{"name":"input","description":"The component that renders the input.","default":"'input'","class":".MuiNumberInput-input"},{"name":"incrementButton","description":"The component that renders the increment button.","default":"'button'","class":".MuiNumberInput-incrementButton"},{"name":"decrementButton","description":"The component that renders the decrement button.","default":"'button'","class":".MuiNumberInput-decrementButton"}],"classes":{"classes":["adornedEnd","adornedStart","disabled","error","focused","formControl","readOnly"],"globalClasses":{"focused":"Mui-focused","disabled":"Mui-disabled","readOnly":"Mui-readOnly","error":"Mui-error"}},"spread":true,"muiName":"MuiNumberInput","forwardsRefTo":"HTMLDivElement","filename":"/packages/mui-base/src/Unstable_NumberInput/NumberInput.tsx","inheritance":null,"demos":"<ul><li><a href=\"/base-ui/react-number-input/\">Number Input</a></li></ul>","cssComponent":false}},"hooksApiDescriptions":{"useNumberInput":{"en":{"hookDescription":"","parametersDescriptions":{"defaultValue":{"description":"The default value. Use when the component is not controlled."},"disabled":{"description":"If <code>true</code>, the component is disabled. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."},"error":{"description":"If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."},"inputId":{"description":"The <code>id</code> attribute of the input element."},"inputRef":{"description":"The ref of the input element."},"max":{"description":"The maximum value."},"min":{"description":"The minimum value."},"onChange":{"description":"Callback fired after the value is clamped and changes - when the <code>input</code> is blurred or when the stepper buttons are triggered. Called with <code>undefined</code> when the value is unset."},"onInputChange":{"description":"Callback fired when the <code>input</code> value changes after each keypress, before clamping is applied. Note that <code>event.target.value</code> may contain values that fall outside of <code>min</code> and <code>max</code> or are otherwise &quot;invalid&quot;."},"readOnly":{"description":"If <code>true</code>, the <code>input</code> element becomes read-only. The stepper buttons remain active, with the addition that they are now keyboard focusable."},"required":{"description":"If <code>true</code>, the <code>input</code> element is required. The prop defaults to the value (<code>false</code>) inherited from the parent FormControl component."},"shiftMultiplier":{"description":"Multiplier applied to <code>step</code> if the shift key is held while incrementing or decrementing the value. Defaults to <code>10</code>."},"step":{"description":"The amount that the value changes on each increment or decrement."},"value":{"description":"The current value. Use when the component is controlled."}},"returnValueDescriptions":{"disabled":{"description":"If <code>true</code>, the component will be disabled."},"error":{"description":"If <code>true</code>, the <code>input</code> will indicate an error by setting the <code>aria-invalid</code> attribute."},"focused":{"description":"If <code>true</code>, the <code>input</code> will be focused."},"formControlContext":{"description":"Return value from the <code>useFormControlContext</code> hook."},"getDecrementButtonProps":{"description":"Resolver for the decrement button slot&#39;s props."},"getIncrementButtonProps":{"description":"Resolver for the increment button slot&#39;s props."},"getInputProps":{"description":"Resolver for the input slot&#39;s props."},"getRootProps":{"description":"Resolver for the root slot&#39;s props."},"inputValue":{"description":"The dirty <code>value</code> of the <code>input</code> element when it is in focus."},"isDecrementDisabled":{"description":"If <code>true</code>, the decrement button will be disabled. e.g. when the <code>value</code> is already at <code>min</code>"},"isIncrementDisabled":{"description":"If <code>true</code>, the increment button will be disabled. e.g. when the <code>value</code> is already at <code>max</code>"},"required":{"description":"If <code>true</code>, the <code>input</code> will indicate that it&#39;s required."},"value":{"description":"The clamped <code>value</code> of the <code>input</code> element."}}}}},"hooksApiPageContents":{"useNumberInput":{"parameters":{"defaultValue":{"type":{"name":"unknown","description":"unknown"}},"disabled":{"type":{"name":"boolean","description":"boolean"}},"error":{"type":{"name":"boolean","description":"boolean"}},"inputId":{"type":{"name":"string","description":"string"}},"inputRef":{"type":{"name":"React.Ref&lt;HTMLInputElement&gt;","description":"React.Ref&lt;HTMLInputElement&gt;"}},"max":{"type":{"name":"number","description":"number"}},"min":{"type":{"name":"number","description":"number"}},"onBlur":{"type":{"name":"(event?: React.FocusEvent) =&gt; void","description":"(event?: React.FocusEvent) =&gt; void"}},"onChange":{"type":{"name":"(event: React.FocusEvent&lt;HTMLInputElement&gt; | React.PointerEvent | React.KeyboardEvent, value: number | undefined) =&gt; void","description":"(event: React.FocusEvent&lt;HTMLInputElement&gt; | React.PointerEvent | React.KeyboardEvent, value: number | undefined) =&gt; void"}},"onClick":{"type":{"name":"React.MouseEventHandler","description":"React.MouseEventHandler"}},"onFocus":{"type":{"name":"React.FocusEventHandler","description":"React.FocusEventHandler"}},"onInputChange":{"type":{"name":"React.ChangeEventHandler&lt;HTMLInputElement&gt;","description":"React.ChangeEventHandler&lt;HTMLInputElement&gt;"}},"readOnly":{"type":{"name":"boolean","description":"boolean"},"default":"false"},"required":{"type":{"name":"boolean","description":"boolean"}},"shiftMultiplier":{"type":{"name":"number","description":"number"}},"step":{"type":{"name":"number","description":"number"}},"value":{"type":{"name":"unknown","description":"unknown"}}},"returnValue":{"disabled":{"type":{"name":"boolean","description":"boolean"},"default":"false","required":true},"error":{"type":{"name":"boolean","description":"boolean"},"default":"false","required":true},"focused":{"type":{"name":"boolean","description":"boolean"},"default":"false","required":true},"formControlContext":{"type":{"name":"FormControlState | undefined","description":"FormControlState | undefined"},"required":true},"getDecrementButtonProps":{"type":{"name":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputDecrementButtonSlotProps&lt;TOther&gt;","description":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputDecrementButtonSlotProps&lt;TOther&gt;"},"required":true},"getIncrementButtonProps":{"type":{"name":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputIncrementButtonSlotProps&lt;TOther&gt;","description":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputIncrementButtonSlotProps&lt;TOther&gt;"},"required":true},"getInputProps":{"type":{"name":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputInputSlotProps&lt;TOther&gt;","description":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputInputSlotProps&lt;TOther&gt;"},"required":true},"getRootProps":{"type":{"name":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputRootSlotProps&lt;TOther&gt;","description":"&lt;TOther extends Record&lt;string, any&gt; = {}&gt;(externalProps?: TOther) =&gt; UseNumberInputRootSlotProps&lt;TOther&gt;"},"required":true},"inputValue":{"type":{"name":"string | undefined","description":"string | undefined"},"required":true},"isDecrementDisabled":{"type":{"name":"boolean","description":"boolean"},"default":"false","required":true},"isIncrementDisabled":{"type":{"name":"boolean","description":"boolean"},"default":"false","required":true},"required":{"type":{"name":"boolean","description":"boolean"},"default":"false","required":true},"value":{"type":{"name":"unknown","description":"unknown"},"required":true}},"name":"useNumberInput","filename":"/packages/mui-base/src/unstable_useNumberInput/useNumberInput.ts","imports":["import { unstable_useNumberInput as useNumberInput } from '@mui/base/unstable_useNumberInput';","import { unstable_useNumberInput as useNumberInput } from '@mui/base';"],"demos":"<ul><li><a href=\"/base-ui/react-number-input/#hook\">Number Input</a></li></ul>"}}},"__N_SSG":true}