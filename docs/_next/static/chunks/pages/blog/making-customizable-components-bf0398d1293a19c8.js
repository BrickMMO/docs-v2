(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[20377],{908366:function(n,e,s){"use strict";var a=s(163804),t=s(80117),o=s(667294),i=s(490512),p=s(829624),c=s(602688),l=s(424633),r=s(179477),u=s(231505),d=s(785893),h=["className"],m=function(n){var e=n.classes;return(0,p.Z)({root:["root"]},u.E,e)},g=(0,c.ZP)(r.Z,{name:"MuiAlertTitle",slot:"Root",overridesResolver:function(n,e){return e.root}})(function(n){return{fontWeight:n.theme.typography.fontWeightMedium,marginTop:-2}}),k=o.forwardRef(function(n,e){var s=(0,l.Z)({props:n,name:"MuiAlertTitle"}),o=s.className,p=(0,t.Z)(s,h),c=m(s);return(0,d.jsx)(g,(0,a.Z)({gutterBottom:!0,component:"div",ownerState:s,ref:e,className:(0,i.default)(c.root,o)},p))});e.Z=k},231505:function(n,e,s){"use strict";s.d(e,{E:function(){return o}});var a=s(173729),t=s(899933);function o(n){return(0,t.Z)("MuiAlertTitle",n)}var i=(0,a.Z)("MuiAlertTitle",["root"]);e.Z=i},424914:function(n,e,s){"use strict";s.r(e),s.d(e,{default:function(){return p}}),s(667294);var a,t=s(276435),o={en:{description:"Explore the tradeoffs between different customization techniques, and how we landed on our strategy at MUI.",location:"/brickmmo-docs-v2/pages/blog/making-customizable-components.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M5.025 14H6.95c.183 0 .35-.029.5-.087a1.24 1.24 0 0 0 .425-.288L13.65 7.9a.622.622 0 0 0 .2-.45.622.622 0 0 0-.2-.45l-2.3-2.3a.622.622 0 0 0-.45-.2.622.622 0 0 0-.45.2l-5.725 5.775a1.24 1.24 0 0 0-.287.425 1.37 1.37 0 0 0-.088.5v1.925c0 .184.067.342.2.475a.65.65 0 0 0 .475.2Zm5.325 0h5.725c.367 0 .68-.129.938-.387.258-.258.387-.57.387-.938 0-.366-.13-.679-.387-.937a1.277 1.277 0 0 0-.938-.388H13L10.35 14Zm-5.5 4.4-2.4 2.4c-.417.417-.896.509-1.437.275C.47 20.842.2 20.434.2 19.85V3.55c0-.733.258-1.358.775-1.875A2.554 2.554 0 0 1 2.85.9h16.3c.733 0 1.358.259 1.875.775.517.517.775 1.142.775 1.875v12.2c0 .734-.258 1.359-.775 1.875a2.554 2.554 0 0 1-1.875.775H4.85Z"/>\n      </symbol>\n      </svg>','<p>MUI&#39;s components are used by hundreds of thousands of developers worldwide, encompassing the full range of implementation from minor side projects to massive company websites.</p>\n<p>This variety of users presents a dilemma for us as maintainers: hobbyists working on side projects want fully built components that work right out of the box, so they can focus on the application logic; many larger companies, by contrast, want to be able to fully customize components to respect their brand design.</p>\n<p>Managing these contradictory needs only becomes more difficult as component complexity increases.</p>\n<p>This article reviews several different approaches that a developer might take to customize UI components, as well as the various tradeoffs associated with each method.\nAlong the way, we&#39;ll explore how these tradeoffs ultimately led to the solution that we&#39;ve settled on for customizing MUI components: the slot strategy.</p>\n<h2 id="style-modification">Style modification<a aria-labelledby="style-modification" class="anchor-link" href="#style-modification" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="style-modification"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>(Don&#39;t need us to convince you to use a style library?\nFeel free to skip this section and move on to <a href="#logic-modification">Logic modification</a>.)</p>\n<h3 id="good-old-css">Good old CSS<a aria-labelledby="good-old-css" class="anchor-link" href="#good-old-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="good-old-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Let&#39;s start with the easiest part: modifying the style.\nThis will necessarily involve CSSâ€”especially the notion of <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">specificity</a>, which says that if an element is targeted by two CSS selectors, the browser will apply the more specific one.\nUsually this means that the selector with more classes applied to it is more specific and therefore takes precedence.</p>\n<p>For example, if we look at the Material UI <code>Switch</code> component, we have multiple subcomponents that we could expect to modify.\nFor each of them, we assign a specific CSS class:</p>\n<img src="/static/blog/making-customizable-components/switchHighlighted.png" style="width: 692px; aspect-ratio: 173/80; margin-top: 16px; margin-bottom: 16px;" loading="lazy" alt="Switch component with highlighted sub components" />\n\n<p>Notice that each element is styled using only one CSS classâ€”the thumb style, for example, is applied with the <code>css-jsexje-MuiSwitch-thumb</code> class, so any CSS selector that includes more than one class will override its style.</p>\n<p>I&#39;m not a designer, so I made an ugly switch example using only CSSâ€”\nyou can play around with it in <a href="https://codesandbox.io/s/fast-http-kv85p5?file=/src/App.js">CodeSandbox</a>:</p>\n<img src="/static/blog/making-customizable-components/uglySwitches.png" style="width: 692px; aspect-ratio: 173/80; margin-top: 16px; margin-bottom: 8px;" loading="lazy" alt="Switch customized with CSS" />\n\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uglySwitch<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<div class="MuiCode-root"><pre><code class="language-css"><span class="token comment">/* two classes are more specific than the default single class selector */</span>\n<span class="token selector">.uglySwitch .MuiSwitch-thumb</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.uglySwitch .MuiTouchRipple-root</span> <span class="token punctuation">{</span>\n  <span class="token property">border</span><span class="token punctuation">:</span> 2px solid red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.uglySwitch .MuiSwitch-track</span> <span class="token punctuation">{</span>\n  <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="let-js-generate-the-css">Let JS generate the CSS<a aria-labelledby="let-js-generate-the-css" class="anchor-link" href="#let-js-generate-the-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="let-js-generate-the-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Maybe you don&#39;t want to spend your time switching between CSS and JavaScript files, or writing long, cluttered stylesheets.\nTo avoid these problems you can integrate styles directly into your JS code. \uD83C\uDF89</p>\n<p>Because the level of customization varies across projects, MUI&#39;s components can be customized in several different ways.\nFor more information on this topic, check out the <a href="https://mui.com/material-ui/customization/how-to-customize/">Material UI customization documentation</a>.</p>\n<h2 id="logic-modification">Logic modification<a aria-labelledby="logic-modification" class="anchor-link" href="#logic-modification" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="logic-modification"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Styling is not the only thing you need to customize.\nYou may have to modify the logic, which must be handled by the component itself.</p>\n<h3 id="simply-add-a-prop">Simply add a prop<a aria-labelledby="simply-add-a-prop" class="anchor-link" href="#simply-add-a-prop" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="simply-add-a-prop"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Consider a React UI component that lets users rate a product.</p>\n<p>The default setting ranges from a score of 1 to 5.\nBut what if you need to increase it to 10?\nIn this case, you could add a <code>max</code> prop that tells the UI what the highest possible rating should be, making it simpler to customize.</p>\n<p>This works well enough for a simple UI element, but what happens when the component in question has many more moving parts?</p>\n<h3 id="its-never-that-simple">It&#39;s never that simple<a aria-labelledby="its-never-that-simple" class="anchor-link" href="#its-never-that-simple" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="its-never-that-simple"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Let&#39;s play with a slightly more complex component: the <a href="https://mui.com/x/react-data-grid/"><code>DataGrid</code></a>.</p>\n<p>This component allows you to manage data by applying sorting, filtering, editing, exporting, and many other <em>-ings</em>.</p>\n<p>To give you an idea of how complex this component can get, let&#39;s look at an example of a feature request for the <code>DataGrid</code> and think about how we could address it:</p>\n<aside class="MuiCallout-root MuiCallout-info">\n            <svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon">\n<use class="MuiCode-copied-icon" xlink:href="#info-icon" />\n</svg>\n            <div class="MuiCallout-content">\n            <p><strong>[DataGrid] Sorting column options by alphabetical order</strong></p>\n<p>When I open the filter panel, the input listing the names of the columns is sorted according to column position.\nI would like to be able to sort it by alphabetical order.</p>\n<img src="/static/blog/making-customizable-components/issueScreenshot.png" style="width: 692px; aspect-ratio: 329/212; margin-top: 16px; margin-bottom: 8px;" loading="lazy" alt="Screen shot of the filter panel with column selector un sorted" />\n</div></aside><p>This request makes sense.\nWhen you have a lot of columns, sorting them can make it easier to browse the list.\nBut how should we implement this kind of customization?</p>\n<p>Adding a prop called <code>filterPanelColumnInputSortingStrategy</code> could work, but please, don&#39;t do that.</p>\n<p>It just doesn&#39;t scale.</p>\n<p>There are too many different props that developers might need to modify.\nYou will end up with API documentation so long that it will take an eternity to scroll to the endâ€”meaning nobody will read it.</p>\n<img src="/static/blog/making-customizable-components/bruce.gif" style="width: 500px; aspect-ratio: 500/281; margin-top: 16px; margin-bottom: 8px;" loading="lazy" alt="Your user opening the list of props" />\n\n<p>Instead, consider these alternative solutions that can scale more efficiently with complex components:</p>\n<h3 id="other-solutions">Other solutions<a aria-labelledby="other-solutions" class="anchor-link" href="#other-solutions" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="other-solutions"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><h4>Don&#39;t bother with components</h4><p>Passing all the parameters as props of a single component doesn&#39;t work.\nSo why not just create no components at all?</p>\n<p>That&#39;s not a jokeâ€”that&#39;s the approach of headless libraries such as <a href="https://www.npmjs.com/package/react-table">react-table</a>.\nInstead of providing working components, they provide hooks for managing the features and let developers build their components on top of it.</p>\n<p>If you&#39;re willing to start from scratch, it can be a nice approach.\nUse one hook to manage filtering, another one to manage sorting, and then build your UI using returned values.</p>\n<p>This approach can scale because you can scope parameters to individual features.\nThe filtering hooks will only take into account parameters impacting the filtering, and so onâ€”so you can split your code feature by feature.</p>\n<p>But because this is a fully custom approach, it will take the most amount of work relative to all other options to construct a functional UI.\nIf your main priority is to get up and running quickly, then this may not be a viable solution.</p>\n<h4>Subdivide your components</h4><p>Another approach I like is to provide subcomponents.\nThis is what we do for MUI Core components such as the <a href="https://mui.com/material-ui/react-menu/">Menu</a>.</p>\n<p>This is also the approach used by <a href="https://marmelab.com/react-admin/">react-admin</a> to provide a customizable administration interface.\nHere is their quick start example:</p>\n<p>The idea is to put the <code>Admin</code> component at the root level of the app.\nThis component a provider that&#39;s responsible for managing all data fetching and passing that data back to components.</p>\n<p>The second important component is <code>ListGuesser</code> which defines how the data should be displayed.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Admin<span class="token punctuation">,</span> Resource<span class="token punctuation">,</span> ListGuesser <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-admin\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> simpleRestProvider <span class="token keyword">from</span> <span class="token string">\'ra-data-simple-rest\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> dataProvider <span class="token operator">=</span> <span class="token function">simpleRestProvider</span><span class="token punctuation">(</span><span class="token string">\'https://domain.tld/api\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Admin</span></span> <span class="token attr-name">dataProvider</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>dataProvider<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Resource</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>users<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ListGuesser<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Admin</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>If you&#39;re unhappy with the rendering of the <code>ListGuesser</code>, then you can define your own components by reusing smaller components.\nIf you&#39;re unhappy with the smaller components, in turn, you can replace those with custom ones as well, and so on.</p>\n<p>So you start with a component that&#39;s fully functional right out of the box, and you can rewrite any of its constituent elements as needed.</p>\n<p>This approach has one major advantage: it gives you a lot of flexibility.\nFor example, you can easily modify the order of the components and their parent/children relationships.</p>\n<p>This approach has also one major drawback: it gives you a lot of flexibility.\nFor example, you can easily modify the order of components in a bad way.\n<em>The more freedom, the more bugs</em>.</p>\n<h5>Drawback example</h5><p>To show you how easy it is to make a mistake using this technique, here is a personal example involving Material UI components.</p>\n<p>I recently tried to wrap a <code>TextField</code> component in a <code>FormControl</code>, and was frustrated when it didn&#39;t work.\nBut the reason why is quite simple: the <code>TextField</code> component is itself composed of an input wrapped inside of a <code>FormControl</code>, and neither TypeScript nor <code>console.error</code> messages could warn me that my rendered markup was redundant and broken.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextField</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n\n<span class="token comment">// Equivalent to</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">InputLabel</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FormHelperText</span></span> <span class="token punctuation">/></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FormControl</span></span><span class="token punctuation">></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This trade-off makes sense for react-admin, which is used for building complete websites.\nTheir users need complete freedom when it comes to rearranging components and introducing new components anywhere.</p>\n<p>But MUI&#39;s products exist at a lower level.\nWe focus on the building blocks, not the entire websiteâ€”though we do have <a href="https://mui.com/templates/">templates</a> for that. \uD83D\uDE09\nSo that&#39;s not the approach we took for the <code>DataGrid</code>.</p>\n<h4>Keep a single component</h4><p>For <code>DataGrid</code>, we wanted to make it as simple as possible to add the DataGrid to your application, so we stuck with the individual component structure, which is to say that to create a new data grid, all you need is <code>&lt;DataGrid rows={...} columns={...} /&gt;</code>.</p>\n<p>To customize this single component, we use what we call the slot strategy.</p>\n<h2 id="the-slot-solution">The slot solution<a aria-labelledby="the-slot-solution" class="anchor-link" href="#the-slot-solution" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="the-slot-solution"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Now we are back to the original problem: how to provide deep customization options for a single component. Let&#39;s look at how we use slots to balance the freedom to customize with the need to avoid building from scratch.</p>\n<h3 id="overriding-default-components">Overriding default components<a aria-labelledby="overriding-default-components" class="anchor-link" href="#overriding-default-components" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="overriding-default-components"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>First let&#39;s modify the appearance of the grid.\nFor color, spacing, and other basic properties you have CSS, but not everything is style related.</p>\n<p>Here is a view of the grid with the filter panel open.\nThere&#39;s an <strong>x</strong> icon on the left side of the panel for deleting the current filter.</p>\n<p>Say you want to replace this <strong>x</strong> with a trash icon.\nYou can&#39;t do it with CSSâ€”you need DOM modification to replace the SVG icon.</p>\n<img src="/static/blog/making-customizable-components/FilterPanel.png" style="width: 692px; aspect-ratio: ; margin-top: 16px; margin-bottom: 16px;" loading="lazy" alt="Default view of filter panel" />\n\n<p>To manage such a scenario, the <code>DataGrid</code> has a prop called <code>components</code>.\nThis prop lets you replace some internal grid components with your own custom ones.</p>\n<p>In this case, the component to replace is the <code>FilterPanelDeleteIcon</code>, which becomes <code>DeleteIcon</code>:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">components</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">FilterPanelDeleteIcon</span><span class="token operator">:</span> DeleteIcon <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>That&#39;s all it takes.\nFor every icon, there is a corresponding key in <code>components</code> that we call a slot.\nIf you provide a component to a slot, your component will be used instead of the default one.</p>\n<p>Beyond swapping out icons, you can also plug native HTML elements into component slots, making it simple to customize the DOM structure of any component to suit your needs.</p>\n<h3 id="passing-props">Passing props<a aria-labelledby="passing-props" class="anchor-link" href="#passing-props" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="passing-props"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Slots are great for customizing the style and structure of small components.\nBut what about a situation like the aforementioned <a href="#its-never-that-simple">feature request</a>, where we need to modify the logic of the Data Grid&#39;s column selector?</p>\n<p>We can&#39;t provide a slot to override the selector alone, or else we would need to provide one for all of the inputs and buttons, which are too numerous to keep track of.</p>\n<p>We could use a slot to override the filter panel.\nWe provide this slot just in case you need a fully customized panel.\nBut honestly, who wants to rewrite an entire component just for simple sorting options?</p>\n<p>Instead, what would be nice is to have a prop called <code>columnsSort</code> that lets you sort the column selector in ascending and descending order.\nBy adding this prop to the default filter panel, we can derive a customized panel like this:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> GridFilterPanel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/x-data-grid\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">CustomFilterPanel</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">GridFilterPanel</span></span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">columnsSort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>asc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>But this strategy of adding props to customize components is a bit verbose.\nSo we added a way to pass props to an existing component using <code>slotProps</code>.\nYou can pass props to every slot on <code>slots</code> using <code>slotProps</code>.</p>\n<p>Here&#39;s how to pass <code>columnsSort=&#39;asc&#39;</code> to the filter panel slot:</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">DataGrid</span></span>\n  <span class="token attr-name">componentsProps</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">filterPanel</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">columnsSort</span><span class="token operator">:</span> <span class="token string">\'asc\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>This way of passing props is nice, because it scopes them.\nProps for the filter panel live together in <code>componentProps.filterPanel</code>.\nAnd the same goes for the toolbar, the column menu, and all other components.</p>\n<p>It also works pretty well with TypeScript autocomplete, because none of the slots have very many props.\nSo as soon as you&#39;ve specified which slot you want to pass props to, your IDE will make good recommendations.</p>\n<h2 id="what-should-i-use">What should I use?<a aria-labelledby="what-should-i-use" class="anchor-link" href="#what-should-i-use" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="what-should-i-use"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>If your goal is to customize the style, please don&#39;t start from scratchâ€”use libraries to manage your CSS.\nBy adhering to solid class management standards, you should be able to provide styles that are easy to override.</p>\n<p>You should add props to a component only if they impact the entire componentâ€”for example, disabling filtering impacts the whole grid, so a prop would be a viable solution here.</p>\n<p>You should add slots to override icons, because it&#39;s common to need to replace them, so it should be easy to do.</p>\n<p>Slots should also be added when your component is somewhat independent from the main one.\nFor example, a grid can exist without its filter panel, or without its toolbar.</p>\n<h2 id="customization-is-key">Customization is key<a aria-labelledby="customization-is-key" class="anchor-link" href="#customization-is-key" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="customization-is-key"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>In our last two annual <a href="/blog/2021-developer-survey-results/">developer surveys</a>, our users made it clear that customization is always a top priority when choosing a UI library.</p>\n<p>Thanks to the slot strategy and the introduction of supplementary tools like <a href="https://mui.com/system/getting-started/the-sx-prop/">MUI System&#39;s <code>sx</code> prop</a>, it has never been easier to customize MUI&#39;s components to suit your specific needs.</p>\n<p><a href="https://mui.com/material-ui/getting-started/">Material UI</a> and <a href="https://mui.com/joy-ui/getting-started/">Joy UI</a> are designed to be both beautiful and flexible right out of the box, while <a href="https://mui.com/base-ui/getting-started/">Base UI</a> gives you the most freedom to implement your own custom styling solution.\n<a href="https://mui.com/x/introduction/">MUI X</a> is comprised of fully featured complex components like the <code>DataGrid</code> whichâ€”as we&#39;ve seenâ€”can still be customized in many ways with minimal friction.</p>\n<p>Get started building with the MUI X Data Grid by <a href="https://mui.com/x/react-data-grid/getting-started/#installation">installing the MIT-licensed Community package</a> today.\nAnd be sure to let us know what you think about the customization experience!</p>\n'],toc:[{text:"Style modification",level:2,hash:"style-modification",children:[{text:"Good old CSS",level:3,hash:"good-old-css"},{text:"Let JS generate the CSS",level:3,hash:"let-js-generate-the-css"}]},{text:"Logic modification",level:2,hash:"logic-modification",children:[{text:"Simply add a prop",level:3,hash:"simply-add-a-prop"},{text:"It&#39;s never that simple",level:3,hash:"its-never-that-simple"},{text:"Other solutions",level:3,hash:"other-solutions"}]},{text:"The slot solution",level:2,hash:"the-slot-solution",children:[{text:"Overriding default components",level:3,hash:"overriding-default-components"},{text:"Passing props",level:3,hash:"passing-props"}]},{text:"What should I use?",level:2,hash:"what-should-i-use",children:[]},{text:"Customization is key",level:2,hash:"customization-is-key",children:[]}],title:"Strategies for building customizable components",headers:{title:"Strategies for building customizable components",description:"Explore the tradeoffs between different customization techniques, and how we landed on our strategy at MUI.",date:"2022-08-22T00:00:00.000Z",authors:["alexfauquette"],tags:["MUI X","MUI Core"],card:"true",components:[],hooks:[]}}},i=s(785893);function p(){return a||(a=(0,i.jsx)(t.Z,{docs:o}))}},502196:function(n,e,s){"use strict";s.d(e,{Z:function(){return l}});var a=s(163804),t=s(777193);s(667294);var o=s(602688),i=s(858280),p=s(785893),c=(0,o.ZP)(i.Z)(function(n){var e=n.theme;return(0,t.Z)({paddingTop:"calc(var(--MuiDocs-header-height) + ".concat(e.spacing(4),")"),fontFamily:"Arial",maxWidth:"105ch"},e.breakpoints.up("lg"),{paddingLeft:e.spacing(8),paddingRight:e.spacing(8)})});function l(n){return(0,p.jsx)(c,(0,a.Z)({id:"main-content",maxWidth:!1},n))}},673835:function(n,e,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/making-customizable-components",function(){return s(424914)}])}},function(n){n.O(0,[52996,8364,41512,82700,27830,7565,36195,17007,43374,48956,98826,16577,43765,98147,78189,76435,49774,92888,40179],function(){return n(n.s=673835)}),_N_E=n.O()}]);