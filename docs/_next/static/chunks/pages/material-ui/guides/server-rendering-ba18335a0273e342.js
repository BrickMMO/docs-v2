(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[62809],{291690:function(n,s,a){"use strict";a.r(s),a.d(s,{default:function(){return u}});var e={};a.r(e),a.d(e,{demoComponents:function(){return i},demos:function(){return c},docs:function(){return p},srcComponents:function(){return l}});var t=a(163804);a(667294);var o=a(165492),p={en:{description:"The most common use case for server-side rendering is to handle the initial render when a user (or search engine crawler) first requests your app.",location:"/brickmmo-docs-v2/data/material/guides/server-rendering/server-rendering.md",rendered:['<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="error-icon" viewBox="0 0 20 20">\n      <path fill-rule="evenodd" d="M2 7.4v5.2a2 2 0 0 0 .586 1.414l3.4 3.4A2 2 0 0 0 7.4 18h5.2a2 2 0 0 0 1.414-.586l3.4-3.4A2 2 0 0 0 18 12.6V7.4a2 2 0 0 0-.586-1.414l-3.4-3.4A2 2 0 0 0 12.6 2H7.4a2 2 0 0 0-1.414.586l-3.4 3.4A2 2 0 0 0 2 7.4Zm11.03-.43a.75.75 0 0 1 0 1.06L11.06 10l1.97 1.97a.75.75 0 1 1-1.06 1.06L10 11.06l-1.97 1.97a.75.75 0 0 1-1.06-1.06L8.94 10 6.97 8.03a.75.75 0 0 1 1.06-1.06L10 8.94l1.97-1.97a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="warning-icon" viewBox="0 0 20 20">\n      <path d="M2.33 17a.735.735 0 0 1-.665-.375.631.631 0 0 1-.094-.375.898.898 0 0 1 .115-.396L9.353 3.062a.621.621 0 0 1 .281-.27.85.85 0 0 1 .729 0 .622.622 0 0 1 .281.27l7.667 12.792c.07.125.108.257.114.396a.63.63 0 0 1-.093.375.842.842 0 0 1-.271.27.728.728 0 0 1-.394.105H2.33Zm7.664-2.5c.211 0 .39-.072.536-.214a.714.714 0 0 0 .218-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.531-.22.736.736 0 0 0-.536.215.714.714 0 0 0-.219.531c0 .212.072.39.215.536.143.146.32.219.531.219Zm0-2.5c.211 0 .39-.072.536-.216a.72.72 0 0 0 .218-.534v-2.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.531-.216.734.734 0 0 0-.536.216.72.72 0 0 0-.219.534v2.5c0 .212.072.39.215.534a.72.72 0 0 0 .531.216Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="success-icon" viewBox="0 0 20 20">\n      <path d="m8.938 10.875-1.25-1.23a.718.718 0 0 0-.521-.228.718.718 0 0 0-.521.229.73.73 0 0 0 0 1.062l1.77 1.771c.153.153.327.23.521.23a.718.718 0 0 0 .521-.23l3.896-3.896a.73.73 0 0 0 0-1.062.718.718 0 0 0-.52-.23.718.718 0 0 0-.521.23l-3.376 3.354ZM10 18a7.796 7.796 0 0 1-3.104-.625 8.065 8.065 0 0 1-2.552-1.719 8.064 8.064 0 0 1-1.719-2.552A7.797 7.797 0 0 1 2 10c0-1.111.208-2.15.625-3.115a8.064 8.064 0 0 1 4.27-4.26A7.797 7.797 0 0 1 10 2c1.111 0 2.15.208 3.115.625a8.096 8.096 0 0 1 4.26 4.26C17.792 7.851 18 8.89 18 10a7.797 7.797 0 0 1-.625 3.104 8.066 8.066 0 0 1-4.26 4.271A7.774 7.774 0 0 1 10 18Z"/>\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="info-icon" viewBox="0 0 20 20">\n      <path d="M9.996 14c.21 0 .39-.072.535-.216a.72.72 0 0 0 .219-.534v-3.5a.728.728 0 0 0-.214-.534.72.72 0 0 0-.532-.216.734.734 0 0 0-.535.216.72.72 0 0 0-.219.534v3.5c0 .213.071.39.214.534a.72.72 0 0 0 .532.216Zm0-6.5c.21 0 .39-.071.535-.214a.714.714 0 0 0 .219-.532.736.736 0 0 0-.214-.535.714.714 0 0 0-.532-.219.736.736 0 0 0-.535.214.714.714 0 0 0-.219.532c0 .21.071.39.214.535.143.146.32.219.532.219Zm.01 10.5a7.81 7.81 0 0 1-3.11-.625 8.065 8.065 0 0 1-2.552-1.719 8.066 8.066 0 0 1-1.719-2.551A7.818 7.818 0 0 1 2 9.99c0-1.104.208-2.14.625-3.105a8.066 8.066 0 0 1 4.27-4.26A7.818 7.818 0 0 1 10.009 2a7.75 7.75 0 0 1 3.106.625 8.083 8.083 0 0 1 4.26 4.265A7.77 7.77 0 0 1 18 9.994a7.81 7.81 0 0 1-.625 3.11 8.066 8.066 0 0 1-1.719 2.552 8.083 8.083 0 0 1-2.546 1.719 7.77 7.77 0 0 1-3.104.625Z"/>\n      </symbol>\n      </svg>','\n      <svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copied-icon" viewBox="0 0 24 24">\n        <path d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8.24 11.28L9.69 11.2c-.38-.39-.38-1.01 0-1.4.39-.39 1.02-.39 1.41 0l1.36 1.37 4.42-4.46c.39-.39 1.02-.39 1.41 0 .38.39.38 1.01 0 1.4l-5.13 5.17c-.37.4-1.01.4-1.4 0zM3 6c-.55 0-1 .45-1 1v13c0 1.1.9 2 2 2h13c.55 0 1-.45 1-1s-.45-1-1-1H5c-.55 0-1-.45-1-1V7c0-.55-.45-1-1-1z" />\n      </symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="copy-icon" viewBox="0 0 24 24">\n      <path d="M15 20H5V7c0-.55-.45-1-1-1s-1 .45-1 1v13c0 1.1.9 2 2 2h10c.55 0 1-.45 1-1s-.45-1-1-1zm5-4V4c0-1.1-.9-2-2-2H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h9c1.1 0 2-.9 2-2zm-2 0H9V4h9v12z" />\n      +</symbol>\n      </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n        <symbol id="anchor-link-icon" viewBox="0 0 12 6">\n          <path d="M8.9176 0.083252H7.1676C6.84677 0.083252 6.58427 0.345752 6.58427 0.666585C6.58427 0.987419 6.84677 1.24992 7.1676 1.24992H8.9176C9.8801 1.24992 10.6676 2.03742 10.6676 2.99992C10.6676 3.96242 9.8801 4.74992 8.9176 4.74992H7.1676C6.84677 4.74992 6.58427 5.01242 6.58427 5.33325C6.58427 5.65409 6.84677 5.91659 7.1676 5.91659H8.9176C10.5276 5.91659 11.8343 4.60992 11.8343 2.99992C11.8343 1.38992 10.5276 0.083252 8.9176 0.083252ZM3.6676 2.99992C3.6676 3.32075 3.9301 3.58325 4.25094 3.58325H7.75094C8.07177 3.58325 8.33427 3.32075 8.33427 2.99992C8.33427 2.67909 8.07177 2.41659 7.75094 2.41659H4.25094C3.9301 2.41659 3.6676 2.67909 3.6676 2.99992ZM4.83427 4.74992H3.08427C2.12177 4.74992 1.33427 3.96242 1.33427 2.99992C1.33427 2.03742 2.12177 1.24992 3.08427 1.24992H4.83427C5.1551 1.24992 5.4176 0.987419 5.4176 0.666585C5.4176 0.345752 5.1551 0.083252 4.83427 0.083252H3.08427C1.47427 0.083252 0.167603 1.38992 0.167603 2.99992C0.167603 4.60992 1.47427 5.91659 3.08427 5.91659H4.83427C5.1551 5.91659 5.4176 5.65409 5.4176 5.33325C5.4176 5.01242 5.1551 4.74992 4.83427 4.74992Z" />\n        </symbol>\n    </svg>','<svg style="display: none;" xmlns="http://www.w3.org/2000/svg">\n      <symbol id="comment-link-icon" viewBox="0 0 24 24">\n      <path d="M5.025 14H6.95c.183 0 .35-.029.5-.087a1.24 1.24 0 0 0 .425-.288L13.65 7.9a.622.622 0 0 0 .2-.45.622.622 0 0 0-.2-.45l-2.3-2.3a.622.622 0 0 0-.45-.2.622.622 0 0 0-.45.2l-5.725 5.775a1.24 1.24 0 0 0-.287.425 1.37 1.37 0 0 0-.088.5v1.925c0 .184.067.342.2.475a.65.65 0 0 0 .475.2Zm5.325 0h5.725c.367 0 .68-.129.938-.387.258-.258.387-.57.387-.938 0-.366-.13-.679-.387-.937a1.277 1.277 0 0 0-.938-.388H13L10.35 14Zm-5.5 4.4-2.4 2.4c-.417.417-.896.509-1.437.275C.47 20.842.2 20.434.2 19.85V3.55c0-.733.258-1.358.775-1.875A2.554 2.554 0 0 1 2.85.9h16.3c.733 0 1.358.259 1.875.775.517.517.775 1.142.775 1.875v12.2c0 .734-.258 1.359-.775 1.875a2.554 2.554 0 0 1-1.875.775H4.85Z"/>\n      </symbol>\n      </svg>','<h1>Server rendering</h1><p class="description">The most common use case for server-side rendering is to handle the initial render when a user (or search engine crawler) first requests your app.</p>\n\n<p>When the server receives the request, it renders the required component(s) into an HTML string, and then sends it as a response to the client.\nFrom that point on, the client takes over rendering duties.</p>\n<h2 id="material-ui-on-the-server">Material UI on the server<a aria-labelledby="material-ui-on-the-server" class="anchor-link" href="#material-ui-on-the-server" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="material-ui-on-the-server"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Material UI was designed from the ground-up with the constraint of rendering on the server, but it&#39;s up to you to make sure it&#39;s correctly integrated.\nIt&#39;s important to provide the page with the required CSS, otherwise the page will render with just the HTML then wait for the CSS to be injected by the client, causing it to flicker (FOUC).\nTo inject the style down to the client, we need to:</p>\n<ol>\n<li>Create a fresh, new <a href="https://emotion.sh/docs/@emotion/cache"><code>emotion cache</code></a> instance on every request.</li>\n<li>Render the React tree with the server-side collector.</li>\n<li>Pull the CSS out.</li>\n<li>Pass the CSS along to the client.</li>\n</ol>\n<p>On the client-side, the CSS will be injected a second time before removing the server-side injected CSS.</p>\n<h2 id="setting-up">Setting up<a aria-labelledby="setting-up" class="anchor-link" href="#setting-up" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="setting-up"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>In the following recipe, we are going to look at how to set up server-side rendering.</p>\n<h3 id="the-theme">The theme<a aria-labelledby="the-theme" class="anchor-link" href="#the-theme" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="the-theme"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>Create a theme that will be shared between the client and the server:</p>\n<p><code>theme.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createTheme <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> red <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/colors\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create a theme instance.</span>\n<span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">createTheme</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">palette</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">primary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#556cd6\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">secondary</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token string">\'#19857b\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">error</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">main</span><span class="token operator">:</span> red<span class="token punctuation">.</span><span class="token constant">A400</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> theme<span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-server-side">The server-side<a aria-labelledby="the-server-side" class="anchor-link" href="#the-server-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="the-server-side"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The following is the outline for what the server-side is going to look like.\nWe are going to set up an <a href="https://expressjs.com/en/guide/using-middleware.html">Express middleware</a> using <a href="https://expressjs.com/en/api.html">app.use</a> to handle all requests that come into the server.\nIf you&#39;re unfamiliar with Express or middleware, know that the <code>handleRender</code> function will be called every time the server receives a request.</p>\n<p><code>server.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// We are going to fill these out in the sections to follow.</span>\n<span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* ... */</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="handling-the-request">Handling the request<a aria-labelledby="handling-the-request" class="anchor-link" href="#handling-the-request" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="handling-the-request"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The first thing that we need to do on every request is to create a new <code>emotion cache</code>.</p>\n<p>When rendering, we will wrap <code>App</code>, the root component,\ninside a <a href="https://emotion.sh/docs/cache-provider"><code>CacheProvider</code></a> and <a href="/system/styles/api/#themeprovider"><code>ThemeProvider</code></a> to make the style configuration and the <code>theme</code> available to all components in the component tree.</p>\n<p>The key step in server-side rendering is to render the initial HTML of the component <strong>before</strong> we send it to the client-side. To do this, we use <a href="https://react.dev/reference/react-dom/server/renderToString">ReactDOMServer.renderToString()</a>.</p>\n<p>Material UI uses Emotion as its default styled engine.\nWe need to extract the styles from the Emotion instance.\nFor this, we need to share the same cache configuration for both the client and server:</p>\n<p><code>createEmotionCache.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">import</span> createCache <span class="token keyword">from</span> <span class="token string">\'@emotion/cache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createEmotionCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">\'css\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<p>With this we are creating a new Emotion cache instance and using this to extract the critical styles for the html as well.</p>\n<p>We will see how this is passed along in the <code>renderFullPage</code> function.</p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">\'express\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOMServer <span class="token keyword">from</span> <span class="token string">\'react-dom/server\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@mui/material/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionServer <span class="token keyword">from</span> <span class="token string">\'@emotion/server/create-instance\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionCache <span class="token keyword">from</span> <span class="token string">\'./createEmotionCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">handleRender</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createEmotionCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> extractCriticalToChunks<span class="token punctuation">,</span> constructStyleTagsFromChunks <span class="token punctuation">}</span> <span class="token operator">=</span>\n    <span class="token function">createEmotionServer</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Render the component to a string.</span>\n  <span class="token keyword">const</span> html <span class="token operator">=</span> ReactDOMServer<span class="token punctuation">.</span><span class="token function">renderToString</span><span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline\n            to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Grab the CSS from emotion</span>\n  <span class="token keyword">const</span> emotionChunks <span class="token operator">=</span> <span class="token function">extractCriticalToChunks</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> emotionCss <span class="token operator">=</span> <span class="token function">constructStyleTagsFromChunks</span><span class="token punctuation">(</span>emotionChunks<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Send the rendered page back to the client.</span>\n  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">renderFullPage</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> emotionCss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">\'/build\'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">\'build\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This is fired every time the server-side receives a request.</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>handleRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">;</span>\napp<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="inject-initial-component-html-and-css">Inject initial component HTML and CSS<a aria-labelledby="inject-initial-component-html-and-css" class="anchor-link" href="#inject-initial-component-html-and-css" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="inject-initial-component-html-and-css"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The final step on the server-side is to inject the initial component HTML and CSS into a template to be rendered on the client-side.</p>\n<div class="MuiCode-root"><pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">renderFullPage</span><span class="token punctuation">(</span><span class="token parameter">html<span class="token punctuation">,</span> css</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n    &lt;!DOCTYPE html>\n    &lt;html>\n      &lt;head>\n        &lt;meta charset="utf-8" />\n        &lt;title>My page&lt;/title>\n        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>css<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n        &lt;meta name="viewport" content="initial-scale=1, width=device-width" />\n        &lt;link rel="preconnect" href="https://fonts.googleapis.com" />\n        &lt;link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />\n        &lt;link\n          rel="stylesheet"\n          href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;600;700&amp;display=swap"\n        />\n      &lt;/head>\n      &lt;body>\n        &lt;div id="root"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>html<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>\n      &lt;/body>\n    &lt;/html>\n  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h3 id="the-client-side">The client-side<a aria-labelledby="the-client-side" class="anchor-link" href="#the-client-side" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="the-client-side"><svg><use xlink:href="#comment-link-icon" /></svg></button></h3><p>The client-side is straightforward.\nAll we need to do is use the same cache configuration as the server-side.\nLet&#39;s take a look at the client file:</p>\n<p><code>client.js</code></p>\n<div class="MuiCode-root"><pre><code class="language-jsx"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> CssBaseline <span class="token keyword">from</span> <span class="token string">\'@mui/material/CssBaseline\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@mui/material/styles\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> CacheProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@emotion/react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./App\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> theme <span class="token keyword">from</span> <span class="token string">\'./theme\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> createEmotionCache <span class="token keyword">from</span> <span class="token string">\'./createEmotionCache\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token function">createEmotionCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CacheProvider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>cache<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span> <span class="token attr-name">theme</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>theme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">{</span><span class="token comment">/* CssBaseline kickstart an elegant, consistent, and simple baseline\n            to build upon. */</span><span class="token punctuation">}</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CssBaseline</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CacheProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">hydrate</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Main</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">\'#root\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><button data-ga-event-category="code" data-ga-event-action="copy-click" aria-label="Copy the code" class="MuiCode-copy"><svg focusable="false" aria-hidden="true" viewBox="0 0 24 24" data-testid="ContentCopyRoundedIcon"><use class="MuiCode-copy-icon" xlink:href="#copy-icon" /><use class="MuiCode-copied-icon" xlink:href="#copied-icon" /></svg><span class="MuiCode-copyKeypress"><span>(or</span> $keyC<span>)</span></span></button></div>\n<h2 id="reference-implementations">Reference implementations<a aria-labelledby="reference-implementations" class="anchor-link" href="#reference-implementations" tabindex="-1"><svg><use xlink:href="#anchor-link-icon" /></svg></a><button title="Post a comment" class="comment-link" data-feedback-hash="reference-implementations"><svg><use xlink:href="#comment-link-icon" /></svg></button></h2><p>Here is <a href="https://github.com/mui/material-ui/tree/HEAD/examples/material-ui-express-ssr">the reference implementation of this tutorial</a>.\nYou can more SSR implementations in the GitHub repository under the <code>/examples</code> folder, see <a href="/material-ui/getting-started/example-projects/">the other examples</a>.</p>\n'],toc:[{text:"Material UI on the server",level:2,hash:"material-ui-on-the-server",children:[]},{text:"Setting up",level:2,hash:"setting-up",children:[{text:"The theme",level:3,hash:"the-theme"},{text:"The server-side",level:3,hash:"the-server-side"},{text:"Handling the request",level:3,hash:"handling-the-request"},{text:"Inject initial component HTML and CSS",level:3,hash:"inject-initial-component-html-and-css"},{text:"The client-side",level:3,hash:"the-client-side"}]},{text:"Reference implementations",level:2,hash:"reference-implementations",children:[]}],title:"Server rendering",headers:{components:[]}}},c={};c.scope={process:{},import:{}};var i={},l={},r=a(785893);function u(){return(0,r.jsx)(o.Z,(0,t.Z)({},e))}},165492:function(n,s,a){"use strict";a.d(s,{Z:function(){return w}});var e,t=a(163804),o=a(667294),p=a(45697),c=a.n(p),i=a(811163),l=a(721923),r=a(875795),u=a(608144),k=a(772184),d=a(400438),h=a(692124),m=a(261589),g=a(703391),v=a(662208),y=a(785893);function f(n){var s=n.mode,a=(0,r.tv)().setMode;return o.useEffect(function(){a(s)},[s,a]),null}function w(n){var s=(0,l.Z)(),a=(0,i.useRouter)(),p=(0,k.ln)(a.asPath).canonicalAs,c=n.disableAd,w=void 0!==c&&c,C=n.disableToc,b=n.disableCssVarsProvider,x=n.demos,M=void 0===x?{}:x,T=n.docs,j=n.demoComponents,S=n.srcComponents,P=T[(0,h.useUserLanguage)()]||T.en,H=p.startsWith("/joy-ui/")&&!(void 0!==b&&b),R=H?r.lL:o.Fragment,A=H?m.default:o.Fragment,Z=(0,t.Z)({},H&&{mode:s.palette.mode});return(0,y.jsxs)(d.Z,{description:P.description,disableAd:w,disableToc:void 0!==C&&C,location:P.location,title:P.title,toc:P.toc,children:[w?null:e||(e=(0,y.jsx)(m.default,{children:(0,y.jsx)(v.Z,{children:(0,y.jsx)(g.ZP,{})})})),(0,y.jsxs)(R,{children:[H&&(0,y.jsx)(f,{mode:s.palette.mode}),P.rendered.map(function(n,a){return(0,y.jsx)(u.Z,{demoComponents:j,demos:M,disableAd:w,localizedDoc:P,renderedMarkdownOrDemo:n,srcComponents:S,theme:s,WrapperComponent:A,wrapperProps:Z},"demos-section-".concat(a))})]})]})}f.propTypes={mode:c().oneOf(["light","dark"])}},564661:function(n,s,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/guides/server-rendering",function(){return a(291690)}])}},function(n){n.O(0,[52996,8365,82961,61532,41159,41512,82700,27830,7565,36195,17007,43374,48956,98826,16577,94665,21011,43765,95965,44749,67461,33335,49774,92888,40179],function(){return n(n.s=564661)}),_N_E=n.O()}]);