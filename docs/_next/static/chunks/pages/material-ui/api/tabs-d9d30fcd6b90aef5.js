(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7098],{92659:function(e,o,t){"use strict";t.r(o),t.d(o,{default:function(){return r}}),t(667294);var n=t(543285),i=t(59626),a=JSON.parse('{"props":{"action":{"type":{"name":"custom","description":"ref"}},"allowScrollButtonsMobile":{"type":{"name":"bool"},"default":"false"},"aria-label":{"type":{"name":"string"}},"aria-labelledby":{"type":{"name":"string"}},"centered":{"type":{"name":"bool"},"default":"false"},"children":{"type":{"name":"node"}},"classes":{"type":{"name":"object"},"additionalInfo":{"cssApi":true}},"component":{"type":{"name":"elementType"}},"indicatorColor":{"type":{"name":"union","description":"\'primary\'<br>&#124;&nbsp;\'secondary\'<br>&#124;&nbsp;string"},"default":"\'primary\'"},"onChange":{"type":{"name":"func"},"signature":{"type":"function(event: React.SyntheticEvent, value: any) => void","describedArgs":["event","value"]}},"orientation":{"type":{"name":"enum","description":"\'horizontal\'<br>&#124;&nbsp;\'vertical\'"},"default":"\'horizontal\'"},"ScrollButtonComponent":{"type":{"name":"elementType"},"default":"TabScrollButton"},"scrollButtons":{"type":{"name":"enum","description":"\'auto\'<br>&#124;&nbsp;false<br>&#124;&nbsp;true"},"default":"\'auto\'"},"selectionFollowsFocus":{"type":{"name":"bool"}},"slotProps":{"type":{"name":"shape","description":"{ endScrollButtonIcon?: func<br>&#124;&nbsp;object, startScrollButtonIcon?: func<br>&#124;&nbsp;object }"},"default":"{}"},"slots":{"type":{"name":"shape","description":"{ EndScrollButtonIcon?: elementType, StartScrollButtonIcon?: elementType }"},"default":"{}"},"sx":{"type":{"name":"union","description":"Array&lt;func<br>&#124;&nbsp;object<br>&#124;&nbsp;bool&gt;<br>&#124;&nbsp;func<br>&#124;&nbsp;object"},"additionalInfo":{"sx":true}},"TabIndicatorProps":{"type":{"name":"object"},"default":"{}"},"TabScrollButtonProps":{"type":{"name":"object"},"default":"{}"},"textColor":{"type":{"name":"enum","description":"\'inherit\'<br>&#124;&nbsp;\'primary\'<br>&#124;&nbsp;\'secondary\'"},"default":"\'primary\'"},"value":{"type":{"name":"any"}},"variant":{"type":{"name":"enum","description":"\'fullWidth\'<br>&#124;&nbsp;\'scrollable\'<br>&#124;&nbsp;\'standard\'"},"default":"\'standard\'"},"visibleScrollbar":{"type":{"name":"bool"},"default":"false"}},"name":"Tabs","imports":["import Tabs from \'@mui/material/Tabs\';","import { Tabs } from \'@mui/material\';"],"styles":{"classes":["root","vertical","flexContainer","flexContainerVertical","centered","scroller","fixed","scrollableX","scrollableY","hideScrollbar","scrollButtons","scrollButtonsHideMobile","indicator"],"globalClasses":{},"name":"MuiTabs"},"spread":true,"themeDefaultProps":true,"muiName":"MuiTabs","forwardsRefTo":"HTMLDivElement","filename":"/packages/mui-material/src/Tabs/Tabs.js","inheritance":null,"demos":"<ul><li><a href=\\"/material-ui/react-tabs/\\">Tabs</a></li></ul>","cssComponent":false}'),l=t(785893);function r(e){var o=e.descriptions,t=e.pageContent;return(0,l.jsx)(n.Z,{descriptions:o,pageContent:t})}r.getInitialProps=function(){var e=t(790566);return{descriptions:(0,i.Z)(e),pageContent:a}}},101196:function(e,o,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/api/tabs",function(){return t(92659)}])},790566:function(e,o,t){var n={"./tabs.json":780680,"translations/api-docs/tabs/tabs.json":780680};function i(e){return t(a(e))}function a(e){if(!t.o(n,e)){var o=Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=a,e.exports=i,i.id=790566},780680:function(e){"use strict";e.exports=JSON.parse('{"componentDescription":"","propDescriptions":{"action":{"description":"Callback fired when the component mounts. This is useful when you want to trigger an action programmatically. It supports two actions: <code>updateIndicator()</code> and <code>updateScrollButtons()</code>"},"allowScrollButtonsMobile":{"description":"If <code>true</code>, the scroll buttons aren&#39;t forced hidden on mobile. By default the scroll buttons are hidden on mobile and takes precedence over <code>scrollButtons</code>."},"aria-label":{"description":"The label for the Tabs as a string."},"aria-labelledby":{"description":"An id or list of ids separated by a space that label the Tabs."},"centered":{"description":"If <code>true</code>, the tabs are centered. This prop is intended for large views."},"children":{"description":"The content of the component."},"classes":{"description":"Override or extend the styles applied to the component."},"component":{"description":"The component used for the root node. Either a string to use a HTML element or a component."},"indicatorColor":{"description":"Determines the color of the indicator."},"onChange":{"description":"Callback fired when the value changes.","typeDescriptions":{"event":"The event source of the callback. <strong>Warning</strong>: This is a generic event not a change event.","value":"We default to the index of the child (number)"}},"orientation":{"description":"The component orientation (layout flow direction)."},"ScrollButtonComponent":{"description":"The component used to render the scroll buttons."},"scrollButtons":{"description":"<p>Determine behavior of scroll buttons when tabs are set to scroll:</p>\\n<ul>\\n<li><code>auto</code> will only present them when not all the items are visible.</li>\\n<li><code>true</code> will always present them.</li>\\n<li><code>false</code> will never present them.</li>\\n</ul>\\n<p>By default the scroll buttons are hidden on mobile.\\nThis behavior can be disabled with <code>allowScrollButtonsMobile</code>.</p>\\n"},"selectionFollowsFocus":{"description":"If <code>true</code> the selected tab changes on focus. Otherwise it only changes on activation."},"slotProps":{"description":"The extra props for the slot components. You can override the existing props or add new ones."},"slots":{"description":"The components used for each slot inside."},"sx":{"description":"The system prop that allows defining system overrides as well as additional CSS styles."},"TabIndicatorProps":{"description":"Props applied to the tab indicator element."},"TabScrollButtonProps":{"description":"Props applied to the <a href=\\"/material-ui/api/tab-scroll-button/\\"><code>TabScrollButton</code></a> element."},"textColor":{"description":"Determines the color of the <code>Tab</code>."},"value":{"description":"The value of the currently selected <code>Tab</code>. If you don&#39;t want any selected <code>Tab</code>, you can set this prop to <code>false</code>."},"variant":{"description":"<p>Determines additional display behavior of the tabs:</p>\\n<ul>\\n<li><code>scrollable</code> will invoke scrolling properties and allow for horizontally\\n scrolling (or swiping) of the tab bar.</li>\\n<li><code>fullWidth</code> will make the tabs grow to use all the available space,\\n which should be used for small views, like on mobile.</li>\\n<li><code>standard</code> will render the default state.</li>\\n</ul>\\n"},"visibleScrollbar":{"description":"If <code>true</code>, the scrollbar is visible. It can be useful when displaying a long vertical list of tabs."}},"classDescriptions":{"root":{"description":"Styles applied to the root element."},"vertical":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>orientation=\\"vertical\\"</code>"},"flexContainer":{"description":"Styles applied to {{nodeName}}.","nodeName":"the flex container element"},"flexContainerVertical":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the flex container element","conditions":"<code>orientation=\\"vertical\\"</code>"},"centered":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the flex container element","conditions":"<code>centered={true}</code> &amp; <code>!variant=\\"scrollable\\"</code>"},"scroller":{"description":"Styles applied to {{nodeName}}.","nodeName":"the tablist element"},"fixed":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the tablist element","conditions":"<code>!variant=\\"scrollable\\"</code>\\b\\b\\b"},"scrollableX":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the tablist element","conditions":"<code>variant=\\"scrollable\\"</code> and <code>orientation=\\"horizontal\\"</code>"},"scrollableY":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the tablist element","conditions":"<code>variant=\\"scrollable\\"</code> and <code>orientation=\\"vertical\\"</code>"},"hideScrollbar":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the tablist element","conditions":"<code>variant=\\"scrollable\\"</code> and <code>visibleScrollbar={false}</code>"},"scrollButtons":{"description":"Styles applied to {{nodeName}}.","nodeName":"the ScrollButtonComponent component"},"scrollButtonsHideMobile":{"description":"Styles applied to {{nodeName}} if {{conditions}}.","nodeName":"the ScrollButtonComponent component","conditions":"<code>allowScrollButtonsMobile={true}</code>"},"indicator":{"description":"Styles applied to {{nodeName}}.","nodeName":"the TabIndicator component"}}}')}},function(e){e.O(0,[52996,8365,30970,41512,82700,27830,7565,36195,17007,43374,48956,98826,16577,94665,21011,43285,89307,49774,92888,40179],function(){return e(e.s=101196)}),_N_E=e.O()}]);