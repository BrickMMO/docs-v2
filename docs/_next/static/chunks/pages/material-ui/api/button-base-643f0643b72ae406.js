(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[85505],{606888:function(e,t,o){"use strict";o.r(t),o.d(t,{default:function(){return r}}),o(667294);var i=o(543285),s=o(59626),n=JSON.parse('{"props":{"action":{"type":{"name":"custom","description":"ref"}},"centerRipple":{"type":{"name":"bool"},"default":"false"},"children":{"type":{"name":"node"}},"classes":{"type":{"name":"object"},"additionalInfo":{"cssApi":true}},"component":{"type":{"name":"custom","description":"element type"}},"disabled":{"type":{"name":"bool"},"default":"false"},"disableRipple":{"type":{"name":"bool"},"default":"false"},"disableTouchRipple":{"type":{"name":"bool"},"default":"false"},"focusRipple":{"type":{"name":"bool"},"default":"false"},"focusVisibleClassName":{"type":{"name":"string"}},"LinkComponent":{"type":{"name":"elementType"},"default":"\'a\'"},"onFocusVisible":{"type":{"name":"func"}},"sx":{"type":{"name":"union","description":"Array&lt;func<br>&#124;&nbsp;object<br>&#124;&nbsp;bool&gt;<br>&#124;&nbsp;func<br>&#124;&nbsp;object"},"additionalInfo":{"sx":true}},"TouchRippleProps":{"type":{"name":"object"}},"touchRippleRef":{"type":{"name":"union","description":"func<br>&#124;&nbsp;{ current?: { pulsate: func, start: func, stop: func } }"}}},"name":"ButtonBase","imports":["import ButtonBase from \'@mui/material/ButtonBase\';","import { ButtonBase } from \'@mui/material\';"],"styles":{"classes":["root","disabled","focusVisible"],"globalClasses":{"disabled":"Mui-disabled","focusVisible":"Mui-focusVisible"},"name":"MuiButtonBase"},"spread":true,"themeDefaultProps":true,"muiName":"MuiButtonBase","forwardsRefTo":"HTMLButtonElement","filename":"/packages/mui-material/src/ButtonBase/ButtonBase.js","inheritance":null,"demos":"<ul><li><a href=\\"/material-ui/react-button/\\">Button</a></li></ul>","cssComponent":false}'),a=o(785893);function r(e){var t=e.descriptions,o=e.pageContent;return(0,a.jsx)(i.Z,{descriptions:t,pageContent:o})}r.getInitialProps=function(){var e=o(304726);return{descriptions:(0,s.Z)(e),pageContent:n}}},507868:function(e,t,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/material-ui/api/button-base",function(){return o(606888)}])},304726:function(e,t,o){var i={"./button-base.json":359027,"translations/api-docs/button-base/button-base.json":359027};function s(e){return o(n(e))}function n(e){if(!o.o(i,e)){var t=Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}s.keys=function(){return Object.keys(i)},s.resolve=n,e.exports=s,s.id=304726},359027:function(e){"use strict";e.exports=JSON.parse('{"componentDescription":"`ButtonBase` contains as few styles as possible.\\nIt aims to be a simple building block for creating a button.\\nIt contains a load of style reset and some focus/ripple logic.","propDescriptions":{"action":{"description":"A ref for imperative actions. It currently only supports <code>focusVisible()</code> action."},"centerRipple":{"description":"If <code>true</code>, the ripples are centered. They won&#39;t start at the cursor interaction position."},"children":{"description":"The content of the component."},"classes":{"description":"Override or extend the styles applied to the component."},"component":{"description":"The component used for the root node. Either a string to use a HTML element or a component.","requiresRef":true},"disabled":{"description":"If <code>true</code>, the component is disabled."},"disableRipple":{"description":"If <code>true</code>, the ripple effect is disabled.<br>⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure to highlight the element by applying separate styles with the <code>.Mui-focusVisible</code> class."},"disableTouchRipple":{"description":"If <code>true</code>, the touch ripple effect is disabled."},"focusRipple":{"description":"If <code>true</code>, the base button will have a keyboard focus ripple."},"focusVisibleClassName":{"description":"This prop can help identify which element has keyboard focus. The class name will be applied when the element gains the focus through keyboard interaction. It&#39;s a polyfill for the <a href=\\"https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\\">CSS :focus-visible selector</a>. The rationale for using this feature <a href=\\"https://github.com/WICG/focus-visible/blob/HEAD/explainer.md\\">is explained here</a>. A <a href=\\"https://github.com/WICG/focus-visible\\">polyfill can be used</a> to apply a <code>focus-visible</code> class to other components if needed."},"LinkComponent":{"description":"The component used to render a link when the <code>href</code> prop is provided."},"onFocusVisible":{"description":"Callback fired when the component is focused with a keyboard. We trigger a <code>onFocus</code> callback too."},"sx":{"description":"The system prop that allows defining system overrides as well as additional CSS styles."},"TouchRippleProps":{"description":"Props applied to the <code>TouchRipple</code> element."},"touchRippleRef":{"description":"A ref that points to the <code>TouchRipple</code> element."}},"classDescriptions":{"root":{"description":"Styles applied to the root element."},"disabled":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"<code>disabled={true}</code>"},"focusVisible":{"description":"State class applied to {{nodeName}} if {{conditions}}.","nodeName":"the root element","conditions":"keyboard focused"}}}')}},function(e){e.O(0,[52996,8365,30970,41512,82700,27830,7565,36195,17007,43374,48956,98826,16577,94665,21011,43285,89307,49774,92888,40179],function(){return e(e.s=507868)}),_N_E=e.O()}]);